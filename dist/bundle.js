/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/AuthService.ts":
/*!****************************!*\
  !*** ./src/AuthService.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService)\n/* harmony export */ });\n/* harmony import */ var _Diff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Diff */ \"./src/Diff.ts\");\n\r\nclass AuthService {\r\n    constructor() {\r\n        this.currentUser = null;\r\n        this.currentDifficulty = _Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.NORMAL;\r\n        this.USERS_KEY = 'racing_users';\r\n    }\r\n    static getInstance() {\r\n        if (!AuthService.instance) {\r\n            AuthService.instance = new AuthService();\r\n        }\r\n        return AuthService.instance;\r\n    }\r\n    login(username) {\r\n        this.currentUser = username;\r\n        const users = this.getUsers();\r\n        if (!users[username]) {\r\n            users[username] = {\r\n                username,\r\n                createdAt: Date.now(),\r\n                records: {\r\n                    [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.EASY]: null,\r\n                    [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.NORMAL]: null,\r\n                    [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.HARD]: null\r\n                }\r\n            };\r\n        }\r\n        localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\r\n    }\r\n    //   private createNewUser(username: string): UserData {\r\n    //     return {\r\n    //       username,\r\n    //       createdAt: Date.now(),\r\n    //       records: {\r\n    //         [GameDifficulty.EASY]: null,\r\n    //         [GameDifficulty.NORMAL]: null,\r\n    //         [GameDifficulty.HARD]: null\r\n    //       }\r\n    //     };\r\n    //   }\r\n    migrateLegacyUser(oldData) {\r\n        return {\r\n            username: oldData.username,\r\n            createdAt: oldData.createdAt || Date.now(),\r\n            records: {\r\n                [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.EASY]: null,\r\n                [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.NORMAL]: oldData.fastLapTime || null,\r\n                [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.HARD]: null\r\n            }\r\n        };\r\n    }\r\n    setDifficulty(difficulty) {\r\n        this.currentDifficulty = difficulty;\r\n    }\r\n    getUserFastLap() {\r\n        var _a, _b;\r\n        if (!this.currentUser || !this.currentDifficulty)\r\n            return null;\r\n        const users = this.getUsers();\r\n        if (!((_a = users[this.currentUser]) === null || _a === void 0 ? void 0 : _a.records))\r\n            return null;\r\n        return (_b = users[this.currentUser].records[this.currentDifficulty]) !== null && _b !== void 0 ? _b : null;\r\n    }\r\n    updateUserFastLap(time) {\r\n        if (!this.currentUser || !this.currentDifficulty)\r\n            return;\r\n        const users = this.getUsers();\r\n        if (!users[this.currentUser]) {\r\n            this.login(this.currentUser);\r\n            return;\r\n        }\r\n        users[this.currentUser].records[this.currentDifficulty] = time;\r\n        localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\r\n    }\r\n    getAllUsers() {\r\n        const users = this.getUsers();\r\n        return Object.values(users).filter(user => user && user.username);\r\n    }\r\n    getUsers() {\r\n        try {\r\n            const stored = localStorage.getItem(this.USERS_KEY);\r\n            const users = stored ? JSON.parse(stored) : {};\r\n            // Ensure all users have proper structure\r\n            Object.keys(users).forEach(username => {\r\n                if (!users[username].records) {\r\n                    users[username].records = {\r\n                        [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.EASY]: null,\r\n                        [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.NORMAL]: null,\r\n                        [_Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.HARD]: null\r\n                    };\r\n                }\r\n                if (!users[username].createdAt) {\r\n                    users[username].createdAt = Date.now();\r\n                }\r\n            });\r\n            // Save fixed structure back to storage\r\n            localStorage.setItem(this.USERS_KEY, JSON.stringify(users));\r\n            return users;\r\n        }\r\n        catch (error) {\r\n            console.error('Error loading users:', error);\r\n            return {};\r\n        }\r\n    }\r\n    logout() {\r\n        this.currentUser = null;\r\n        this.currentDifficulty = _Diff__WEBPACK_IMPORTED_MODULE_0__.GameDifficulty.NORMAL;\r\n    }\r\n}\r\nAuthService.instance = null;\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/AuthService.ts?");

/***/ }),

/***/ "./src/Diff.ts":
/*!*********************!*\
  !*** ./src/Diff.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DIFFICULTY_SETTINGS: () => (/* binding */ DIFFICULTY_SETTINGS),\n/* harmony export */   GameDifficulty: () => (/* binding */ GameDifficulty)\n/* harmony export */ });\nvar GameDifficulty;\r\n(function (GameDifficulty) {\r\n    GameDifficulty[\"EASY\"] = \"easy\";\r\n    GameDifficulty[\"NORMAL\"] = \"normal\";\r\n    GameDifficulty[\"HARD\"] = \"hard\";\r\n})(GameDifficulty || (GameDifficulty = {}));\r\nconst DIFFICULTY_SETTINGS = {\r\n    [GameDifficulty.EASY]: {\r\n        fogDensity: 5,\r\n        drawDistance: 300,\r\n        totalCars: 50\r\n    },\r\n    [GameDifficulty.NORMAL]: {\r\n        fogDensity: 20,\r\n        drawDistance: 220,\r\n        totalCars: 100\r\n    },\r\n    [GameDifficulty.HARD]: {\r\n        fogDensity: 50,\r\n        drawDistance: 100,\r\n        totalCars: 200\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/Diff.ts?");

/***/ }),

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Game: () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n/* harmony import */ var _stats_Stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stats/Stats */ \"./src/stats/Stats.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\r\n\r\n\r\nclass Game {\r\n    constructor() { }\r\n    static run(options) {\r\n        this.loadImages(options.images, (images) => {\r\n            options.ready(images);\r\n            this.setKeyListener(options.keys);\r\n            let last = _utils_Util__WEBPACK_IMPORTED_MODULE_2__.Util.timestamp();\r\n            let now;\r\n            let dt = 0;\r\n            let gdt = 0;\r\n            const frame = () => {\r\n                now = _utils_Util__WEBPACK_IMPORTED_MODULE_2__.Util.timestamp();\r\n                dt = Math.min(1, (now - last) / 1000);\r\n                gdt = gdt + dt;\r\n                while (gdt > options.step) {\r\n                    gdt = gdt - options.step;\r\n                    options.update(options.step);\r\n                }\r\n                options.render();\r\n                options.stats.update();\r\n                last = now;\r\n                requestAnimationFrame(frame);\r\n            };\r\n            frame();\r\n            this.playMusic();\r\n        });\r\n    }\r\n    static loadImages(names, callback) {\r\n        const result = [];\r\n        let count = names.length;\r\n        const onload = () => {\r\n            if (--count === 0) {\r\n                callback(result);\r\n            }\r\n        };\r\n        names.forEach((name, index) => {\r\n            result[index] = new Image();\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.on(result[index], 'load', onload);\r\n            // Update image path to use relative path\r\n            result[index].src = `./images/${name}.png`;\r\n        });\r\n    }\r\n    static setKeyListener(keys) {\r\n        const onkey = (keyCode, mode) => {\r\n            keys.forEach(k => {\r\n                k.mode = k.mode || 'up';\r\n                if ((k.key === keyCode) || (k.keys && k.keys.includes(keyCode))) {\r\n                    if (k.mode === mode) {\r\n                        k.action();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        document.addEventListener('keydown', (ev) => onkey(ev.keyCode, 'down'));\r\n        document.addEventListener('keyup', (ev) => onkey(ev.keyCode, 'up'));\r\n    }\r\n    static stats(parentId, id) {\r\n        if (!this.statsInstance) {\r\n            // Use singleton Stats instance\r\n            this.statsInstance = _stats_Stats__WEBPACK_IMPORTED_MODULE_1__.Stats.getInstance();\r\n            this.statsInstance.domElement.id = id || 'stats';\r\n            const parent = _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get(parentId);\r\n            if (parent) {\r\n                // Remove any existing stats elements\r\n                const existingStats = document.getElementById('stats');\r\n                if (existingStats) {\r\n                    existingStats.remove();\r\n                }\r\n                // Remove any existing performance message\r\n                const existingMsg = parent.querySelector('[data-performance-msg]');\r\n                if (existingMsg) {\r\n                    existingMsg.remove();\r\n                }\r\n                // Add new elements\r\n                parent.appendChild(this.statsInstance.domElement);\r\n                const msg = document.createElement('div');\r\n                msg.setAttribute('data-performance-msg', 'true');\r\n                msg.style.cssText = \"border: 2px solid gray; padding: 5px; margin-top: 5px; text-align: left; font-size: 1.15em; text-align: right;\";\r\n                msg.innerHTML = \"Your canvas performance is \";\r\n                parent.appendChild(msg);\r\n                const value = document.createElement('span');\r\n                value.innerHTML = \"...\";\r\n                msg.appendChild(value);\r\n                // Single interval for performance message\r\n                setInterval(() => {\r\n                    const fps = this.statsInstance.current();\r\n                    const ok = (fps > 50) ? 'good' : (fps < 30) ? 'bad' : 'ok';\r\n                    const color = (fps > 50) ? 'green' : (fps < 30) ? 'red' : 'gray';\r\n                    value.innerHTML = ok;\r\n                    value.style.color = color;\r\n                    msg.style.borderColor = color;\r\n                }, 5000);\r\n            }\r\n        }\r\n        return this.statsInstance;\r\n    }\r\n    static playMusic() {\r\n        const music = document.getElementById('music');\r\n        const muteButton = document.getElementById('mute');\r\n        console.log('Music element:', music);\r\n        console.log('Mute button:', muteButton);\r\n        if (!music || !muteButton) {\r\n            console.warn('Music or mute button elements not found');\r\n            return;\r\n        }\r\n        // Set initial audio state\r\n        music.loop = true;\r\n        music.volume = 0.05;\r\n        // Get stored mute state and apply it\r\n        const storedMuted = localStorage.getItem('muted') === 'true';\r\n        music.muted = storedMuted;\r\n        // Update button appearance\r\n        if (storedMuted) {\r\n            muteButton.classList.add('on');\r\n        }\r\n        else {\r\n            muteButton.classList.remove('on');\r\n        }\r\n        // Add click handler\r\n        muteButton.onclick = () => {\r\n            console.log('Mute clicked, current muted:', music.muted);\r\n            // Toggle audio state\r\n            music.muted = !music.muted;\r\n            // Store new state\r\n            localStorage.setItem('muted', music.muted.toString());\r\n            // Update button appearance\r\n            if (music.muted) {\r\n                muteButton.classList.add('on');\r\n            }\r\n            else {\r\n                muteButton.classList.remove('on');\r\n            }\r\n            console.log('Mute state updated:', music.muted);\r\n        };\r\n        // Start playing\r\n        try {\r\n            const playPromise = music.play();\r\n            if (playPromise) {\r\n                playPromise.catch((error) => {\r\n                    console.warn('Autoplay prevented:', error);\r\n                    // Add click-to-play if autoplay blocked\r\n                    document.addEventListener('click', function resumeAudio() {\r\n                        music.play();\r\n                        document.removeEventListener('click', resumeAudio);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        catch (error) {\r\n            console.error('Audio playback error:', error);\r\n        }\r\n    }\r\n}\r\nGame.statsInstance = null;\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/Game.ts?");

/***/ }),

/***/ "./src/Hud.ts":
/*!********************!*\
  !*** ./src/Hud.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hud: () => (/* binding */ Hud)\n/* harmony export */ });\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n\r\nclass Hud {\r\n    constructor() {\r\n        this.currentValue = {};\r\n        this.items = {\r\n            speed: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('speed_value') },\r\n            current_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('current_lap_time_value') },\r\n            last_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('last_lap_time_value') },\r\n            fast_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('fast_lap_time_value') }\r\n        };\r\n        // Initialize current values\r\n        Object.keys(this.items).forEach(key => {\r\n            this.currentValue[key] = '';\r\n        });\r\n    }\r\n    resetValue(key) {\r\n        if (this.items[key]) {\r\n            // Clear both the stored value and the display\r\n            this.currentValue[key] = '';\r\n            this.items[key].value = null;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.set(this.items[key].dom, '');\r\n        }\r\n    }\r\n    updateHud(key, value) {\r\n        if (this.items[key]) {\r\n            // Only update if value is different\r\n            if (this.currentValue[key] !== value) {\r\n                this.currentValue[key] = value;\r\n                this.items[key].value = value;\r\n                _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.set(this.items[key].dom, String(value));\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/Hud.ts?");

/***/ }),

/***/ "./src/Polyfill.ts":
/*!*************************!*\
  !*** ./src/Polyfill.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Polyfill: () => (/* binding */ Polyfill)\n/* harmony export */ });\nclass Polyfill {\r\n    static applyRequestAnimationFrame() {\r\n        if (!window.requestAnimationFrame) {\r\n            window.requestAnimationFrame = window.webkitRequestAnimationFrame\r\n                || window.mozRequestAnimationFrame\r\n                || window.oRequestAnimationFrame\r\n                || window.msRequestAnimationFrame\r\n                || function (callback) {\r\n                    window.setTimeout(callback, 1000 / 60);\r\n                };\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/Polyfill.ts?");

/***/ }),

/***/ "./src/Render.ts":
/*!***********************!*\
  !*** ./src/Render.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Render: () => (/* binding */ Render)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\r\n\r\nclass Render {\r\n    static rumbleWidth(projectedRoadWidth, lanes) {\r\n        return projectedRoadWidth / Math.max(6, 2 * lanes);\r\n    }\r\n    static laneMarkerWidth(projectedRoadWidth, lanes) {\r\n        return projectedRoadWidth / Math.max(32, 8 * lanes);\r\n    }\r\n    static polygon(ctx, x1, y1, x2, y2, x3, y3, x4, y4, color) {\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.moveTo(x1, y1);\r\n        ctx.lineTo(x2, y2);\r\n        ctx.lineTo(x3, y3);\r\n        ctx.lineTo(x4, y4);\r\n        ctx.closePath();\r\n        ctx.fill();\r\n    }\r\n    static segment(ctx, width, lanes, x1, y1, w1, x2, y2, w2, fog, color) {\r\n        const r1 = this.rumbleWidth(w1, lanes);\r\n        const r2 = this.rumbleWidth(w2, lanes);\r\n        const l1 = this.laneMarkerWidth(w1, lanes);\r\n        const l2 = this.laneMarkerWidth(w2, lanes);\r\n        ctx.fillStyle = color.grass;\r\n        ctx.fillRect(0, y2, width, y1 - y2);\r\n        this.polygon(ctx, x1 - w1 - r1, y1, x1 - w1, y1, x2 - w2, y2, x2 - w2 - r2, y2, color.rumble);\r\n        this.polygon(ctx, x1 + w1 + r1, y1, x1 + w1, y1, x2 + w2, y2, x2 + w2 + r2, y2, color.rumble);\r\n        this.polygon(ctx, x1 - w1, y1, x1 + w1, y1, x2 + w2, y2, x2 - w2, y2, color.road);\r\n        if (color.lane) {\r\n            const lanew1 = w1 * 2 / lanes;\r\n            const lanew2 = w2 * 2 / lanes;\r\n            let lanex1 = x1 - w1 + lanew1;\r\n            let lanex2 = x2 - w2 + lanew2;\r\n            for (let lane = 1; lane < lanes; lanex1 += lanew1, lanex2 += lanew2, lane++) {\r\n                this.polygon(ctx, lanex1 - l1 / 2, y1, lanex1 + l1 / 2, y1, lanex2 + l2 / 2, y2, lanex2 - l2 / 2, y2, color.lane);\r\n            }\r\n        }\r\n        this.fog(ctx, 0, y1, width, y2 - y1, fog);\r\n    }\r\n    static background(ctx, background, width, height, layer, rotation = 0, offset = 0) {\r\n        const imageW = layer.w / 2;\r\n        const imageH = layer.h;\r\n        const sourceX = layer.x + Math.floor(layer.w * rotation);\r\n        const sourceY = layer.y;\r\n        const sourceW = Math.min(imageW, layer.x + layer.w - sourceX);\r\n        const sourceH = imageH;\r\n        const destX = 0;\r\n        const destY = offset;\r\n        const destW = Math.floor(width * (sourceW / imageW));\r\n        const destH = height;\r\n        ctx.drawImage(background, sourceX, sourceY, sourceW, sourceH, destX, destY, destW, destH);\r\n        if (sourceW < imageW) {\r\n            ctx.drawImage(background, layer.x, sourceY, imageW - sourceW, sourceH, destW - 1, destY, width - destW, destH);\r\n        }\r\n    }\r\n    static sprite(ctx, width, height, resolution, roadWidth, sprites, sprite, scale, destX, destY, offsetX = 0, offsetY = 0, clipY) {\r\n        // Make sure we're using original sprite width/height ratios\r\n        const destW = Math.round((sprite.w * scale * width / 2) * (_constants__WEBPACK_IMPORTED_MODULE_0__.SPRITE_SCALE * roadWidth));\r\n        const destH = Math.round((sprite.h * scale * width / 2) * (_constants__WEBPACK_IMPORTED_MODULE_0__.SPRITE_SCALE * roadWidth));\r\n        // Fix sprite positioning by rounding coordinates\r\n        const spriteX = Math.round(destX + (destW * (offsetX || 0)));\r\n        const spriteY = Math.round(destY + (destH * (offsetY || 0)));\r\n        const clipH = clipY ? Math.max(0, spriteY + destH - clipY) : 0;\r\n        if (clipH < destH) {\r\n            ctx.drawImage(sprites[0], sprite.x, sprite.y, sprite.w, sprite.h - (sprite.h * clipH / destH), spriteX, spriteY, destW, (destH - clipH));\r\n        }\r\n    }\r\n    static player(ctx, width, height, resolution, roadWidth, sprites, speedPercent, scale, destX, destY, steer, updown) {\r\n        const bounce = (1.5 * Math.random() * speedPercent * resolution) * _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([-1, 1]);\r\n        let sprite;\r\n        if (steer < 0) {\r\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_LEFT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_LEFT;\r\n        }\r\n        else if (steer > 0) {\r\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_RIGHT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_RIGHT;\r\n        }\r\n        else {\r\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_STRAIGHT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_STRAIGHT;\r\n        }\r\n        this.sprite(ctx, width, height, resolution, roadWidth, sprites, sprite, scale, destX, destY + bounce, -0.5, -1);\r\n    }\r\n    static fog(ctx, x, y, width, height, fog) {\r\n        if (fog < 1) {\r\n            ctx.globalAlpha = (1 - fog);\r\n            ctx.fillStyle = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.FOG;\r\n            ctx.fillRect(x, y, width, height);\r\n            ctx.globalAlpha = 1;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/Render.ts?");

/***/ }),

/***/ "./src/RoadBuilder.ts":
/*!****************************!*\
  !*** ./src/RoadBuilder.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ROAD: () => (/* binding */ ROAD),\n/* harmony export */   RoadBuilder: () => (/* binding */ RoadBuilder)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\r\n\r\nconst ROAD = {\r\n    LENGTH: {\r\n        NONE: 0,\r\n        SHORT: 25,\r\n        MEDIUM: 50,\r\n        LONG: 100\r\n    },\r\n    HILL: {\r\n        NONE: 0,\r\n        LOW: 20,\r\n        MEDIUM: 40,\r\n        HIGH: 60\r\n    },\r\n    CURVE: {\r\n        NONE: 0,\r\n        EASY: 2,\r\n        MEDIUM: 4,\r\n        HARD: 6\r\n    }\r\n};\r\nclass RoadBuilder {\r\n    static getSegments() {\r\n        return this.segments;\r\n    }\r\n    static lastY() {\r\n        return this.segments.length === 0 ? 0 : this.segments[this.segments.length - 1].p2.world.y;\r\n    }\r\n    static addSegment(curve, y) {\r\n        const n = this.segments.length;\r\n        this.segments.push({\r\n            index: n,\r\n            p1: {\r\n                world: { y: this.lastY(), z: n * this.segmentLength },\r\n                camera: {},\r\n                screen: {}\r\n            },\r\n            p2: {\r\n                world: { y: y, z: (n + 1) * this.segmentLength },\r\n                camera: {},\r\n                screen: {}\r\n            },\r\n            curve: curve,\r\n            sprites: [],\r\n            cars: [],\r\n            color: Math.floor(n / this.rumbleLength) % 2 ? _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.DARK : _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.LIGHT\r\n        });\r\n    }\r\n    static addRoad(enter, hold, leave, curve, y) {\r\n        const startY = this.lastY();\r\n        const endY = startY + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.toInt(y, 0) * this.segmentLength;\r\n        const total = enter + hold + leave;\r\n        for (let n = 0; n < enter; n++)\r\n            this.addSegment(_utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeIn(0, curve, n / enter), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, n / total));\r\n        for (let n = 0; n < hold; n++)\r\n            this.addSegment(curve, _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, (enter + n) / total));\r\n        for (let n = 0; n < leave; n++)\r\n            this.addSegment(_utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(curve, 0, n / leave), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, (enter + hold + n) / total));\r\n    }\r\n    static addStraight(num) {\r\n        num = num || this.rumbleLength;\r\n        this.addRoad(num, num, num, 0, 0);\r\n    }\r\n    static addHill(num, height) {\r\n        num = num || this.rumbleLength;\r\n        height = height || 0;\r\n        this.addRoad(num, num, num, 0, height);\r\n    }\r\n    static addCurve(num, curve, height) {\r\n        num = num || this.rumbleLength;\r\n        curve = curve || 0;\r\n        height = height || 0;\r\n        this.addRoad(num, num, num, curve, height);\r\n    }\r\n    static addLowRollingHills(num, height) {\r\n        num = num || this.rumbleLength;\r\n        height = height || 0;\r\n        this.addRoad(num, num, num, 0, height / 2);\r\n        this.addRoad(num, num, num, 0, -height);\r\n        this.addRoad(num, num, num, 0, height);\r\n        this.addRoad(num, num, num, 0, 0);\r\n        this.addRoad(num, num, num, 0, height / 2);\r\n        this.addRoad(num, num, num, 0, 0);\r\n    }\r\n    static addSCurves() {\r\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, -2, 0);\r\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, 2, 0);\r\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, -2, 0);\r\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, 2, 0);\r\n    }\r\n    static addDownhillToEnd(num) {\r\n        num = num || 200;\r\n        this.addRoad(num, num, num, 0, -this.lastY() / this.segmentLength);\r\n    }\r\n    static addSprite(n, sprite, offset) {\r\n        this.segments[n].sprites.push({ source: sprite, offset: offset });\r\n    }\r\n    static addCar(n, sprite, offset) {\r\n        const car = { offset: offset, z: 0, sprite: sprite };\r\n        this.segments[n].cars.push(car);\r\n    }\r\n    static addBumps() {\r\n        this.addRoad(10, 10, 10, 0, 5);\r\n        this.addRoad(10, 10, 10, 0, -2);\r\n        this.addRoad(10, 10, 10, 0, -5);\r\n        this.addRoad(10, 10, 10, 0, 8);\r\n        this.addRoad(10, 10, 10, 0, 5);\r\n        this.addRoad(10, 10, 10, 0, -7);\r\n        this.addRoad(10, 10, 10, 0, 5);\r\n        this.addRoad(10, 10, 10, 0, -2);\r\n    }\r\n    static resetRoad() {\r\n        this.segments = [];\r\n        this.addStraight(ROAD.LENGTH.SHORT);\r\n        this.addLowRollingHills(ROAD.LENGTH.SHORT, ROAD.HILL.LOW);\r\n        this.addSCurves();\r\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.MEDIUM, ROAD.HILL.LOW);\r\n        this.addBumps();\r\n        this.addLowRollingHills(ROAD.LENGTH.MEDIUM, ROAD.HILL.MEDIUM);\r\n        this.addCurve(ROAD.LENGTH.LONG * 2, ROAD.CURVE.MEDIUM, ROAD.HILL.MEDIUM);\r\n        this.addStraight(ROAD.LENGTH.MEDIUM);\r\n        this.addHill(ROAD.LENGTH.MEDIUM, ROAD.HILL.HIGH);\r\n        this.addSCurves();\r\n        this.addCurve(ROAD.LENGTH.LONG, -ROAD.CURVE.MEDIUM, ROAD.HILL.NONE);\r\n        this.addHill(ROAD.LENGTH.LONG, ROAD.HILL.HIGH);\r\n        this.addCurve(ROAD.LENGTH.LONG, ROAD.CURVE.MEDIUM, -ROAD.HILL.LOW);\r\n        this.addBumps();\r\n        this.addHill(ROAD.LENGTH.LONG, -ROAD.HILL.MEDIUM);\r\n        this.addStraight(ROAD.LENGTH.MEDIUM);\r\n        this.addSCurves();\r\n        this.addDownhillToEnd(200);\r\n        this.resetSprites();\r\n        this.resetCars();\r\n        this.segments[this.findSegment(this.playerZ).index + 2].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.START;\r\n        this.segments[this.findSegment(this.playerZ).index + 3].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.START;\r\n        for (let n = 0; n < this.rumbleLength; n++) {\r\n            this.segments[this.segments.length - 1 - n].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.FINISH;\r\n        }\r\n        this.trackLength = this.segments.length * this.segmentLength;\r\n    }\r\n    static resetSprites() {\r\n        // Fix billboard positions\r\n        this.addSprite(20, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -1);\r\n        this.addSprite(40, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, -1);\r\n        this.addSprite(60, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD08, -1);\r\n        this.addSprite(80, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD09, -1);\r\n        this.addSprite(100, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD01, -1);\r\n        this.addSprite(120, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD02, -1);\r\n        this.addSprite(140, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD03, -1);\r\n        this.addSprite(160, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD04, -1);\r\n        this.addSprite(180, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD05, -1);\r\n        // Adjust offset multipliers for better positioning\r\n        this.addSprite(240, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -1.2);\r\n        this.addSprite(240, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, 1.2);\r\n        this.addSprite(this.segments.length - 25, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -1.2);\r\n        this.addSprite(this.segments.length - 25, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, 1.2);\r\n        // Adjust tree positioning\r\n        for (let n = 10; n < 200; n += 4 + Math.floor(n / 100)) {\r\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PALM_TREE, 0.5 + Math.random() * 0.5);\r\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PALM_TREE, 1 + Math.random() * 2);\r\n        }\r\n        // Adjust plant positioning\r\n        for (let n = 250; n < 1000; n += 5) {\r\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.COLUMN, 1.1);\r\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 5), _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.TREE1, -1 - Math.random() * 2);\r\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 5), _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.TREE2, -1 - Math.random() * 2);\r\n        }\r\n        // Adjust random plant positioning\r\n        for (let n = 200; n < this.segments.length; n += 3) {\r\n            const offset = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([1, -1]) * (2 + Math.random() * 5);\r\n            this.addSprite(n, _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.PLANT_SPRITES), offset);\r\n        }\r\n        // Adjust roadside objects\r\n        for (let n = 1000; n < (this.segments.length - 50); n += 100) {\r\n            const side = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([1, -1]);\r\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 50), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.BILLBOARD_SPRITES), -side);\r\n            for (let i = 0; i < 20; i++) {\r\n                const sprite = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.PLANT_SPRITES);\r\n                const offset = side * (1.5 + Math.random());\r\n                this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 50), sprite, offset);\r\n            }\r\n        }\r\n    }\r\n    static resetCars() {\r\n        this.cars = [];\r\n        for (let n = 0; n < this.totalCars; n++) {\r\n            const offset = Math.random() * _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([-0.8, 0.8]);\r\n            const z = Math.floor(Math.random() * this.segments.length) * this.segmentLength;\r\n            const sprite = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.CAR_SPRITES);\r\n            const speed = this.maxSpeed / 4 + Math.random() * this.maxSpeed / (sprite === _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.SEMI ? 4 : 2);\r\n            const car = { offset, z, sprite, speed, percent: 0 };\r\n            const segment = this.findSegment(car.z);\r\n            segment.cars.push(car);\r\n            this.cars.push(car);\r\n        }\r\n    }\r\n    static findSegment(z) {\r\n        return this.segments[Math.floor(z / this.segmentLength) % this.segments.length];\r\n    }\r\n    static setTotalCars(value) {\r\n        RoadBuilder.totalCars = value;\r\n    }\r\n}\r\nRoadBuilder.segments = [];\r\nRoadBuilder.segmentLength = 200;\r\nRoadBuilder.rumbleLength = 3;\r\nRoadBuilder.playerZ = 0;\r\nRoadBuilder.trackLength = 0;\r\nRoadBuilder.cars = [];\r\nRoadBuilder.totalCars = 200;\r\nRoadBuilder.maxSpeed = RoadBuilder.segmentLength * 60;\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/RoadBuilder.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BACKGROUND: () => (/* binding */ BACKGROUND),\n/* harmony export */   BILLBOARD_SPRITES: () => (/* binding */ BILLBOARD_SPRITES),\n/* harmony export */   CAR_SPRITES: () => (/* binding */ CAR_SPRITES),\n/* harmony export */   COLORS: () => (/* binding */ COLORS),\n/* harmony export */   KEY: () => (/* binding */ KEY),\n/* harmony export */   PLANT_SPRITES: () => (/* binding */ PLANT_SPRITES),\n/* harmony export */   SPRITES: () => (/* binding */ SPRITES),\n/* harmony export */   SPRITE_SCALE: () => (/* binding */ SPRITE_SCALE)\n/* harmony export */ });\nvar KEY;\r\n(function (KEY) {\r\n    KEY[KEY[\"LEFT\"] = 37] = \"LEFT\";\r\n    KEY[KEY[\"UP\"] = 38] = \"UP\";\r\n    KEY[KEY[\"RIGHT\"] = 39] = \"RIGHT\";\r\n    KEY[KEY[\"DOWN\"] = 40] = \"DOWN\";\r\n    KEY[KEY[\"A\"] = 65] = \"A\";\r\n    KEY[KEY[\"D\"] = 68] = \"D\";\r\n    KEY[KEY[\"S\"] = 83] = \"S\";\r\n    KEY[KEY[\"W\"] = 87] = \"W\";\r\n})(KEY || (KEY = {}));\r\nconst COLORS = {\r\n    SKY: '#72D7EE',\r\n    TREE: '#005108',\r\n    FOG: '#005108',\r\n    LIGHT: { road: '#6B6B6B', grass: '#10AA10', rumble: '#555555', lane: '#CCCCCC' },\r\n    DARK: { road: '#696969', grass: '#009A00', rumble: '#BBBBBB' },\r\n    START: { road: 'white', grass: 'white', rumble: 'white' },\r\n    FINISH: { road: 'black', grass: 'black', rumble: 'black' }\r\n};\r\nconst BACKGROUND = {\r\n    HILLS: { x: 5, y: 5, w: 1280, h: 480 },\r\n    SKY: { x: 5, y: 495, w: 1280, h: 480 },\r\n    TREES: { x: 5, y: 985, w: 1280, h: 480 }\r\n};\r\nconst SPRITES = {\r\n    PALM_TREE: { x: 5, y: 5, w: 215, h: 540 },\r\n    BILLBOARD08: { x: 230, y: 5, w: 385, h: 265 },\r\n    TREE1: { x: 625, y: 5, w: 360, h: 360 },\r\n    DEAD_TREE1: { x: 5, y: 555, w: 135, h: 332 },\r\n    BILLBOARD09: { x: 150, y: 555, w: 328, h: 282 },\r\n    BOULDER3: { x: 230, y: 280, w: 320, h: 220 },\r\n    COLUMN: { x: 995, y: 5, w: 200, h: 315 },\r\n    BILLBOARD01: { x: 625, y: 375, w: 300, h: 170 },\r\n    BILLBOARD06: { x: 488, y: 555, w: 298, h: 190 },\r\n    BILLBOARD05: { x: 5, y: 897, w: 298, h: 190 },\r\n    BILLBOARD07: { x: 313, y: 897, w: 298, h: 190 },\r\n    BOULDER2: { x: 621, y: 897, w: 298, h: 140 },\r\n    TREE2: { x: 1205, y: 5, w: 282, h: 295 },\r\n    BILLBOARD04: { x: 1205, y: 310, w: 268, h: 170 },\r\n    DEAD_TREE2: { x: 1205, y: 490, w: 150, h: 260 },\r\n    BOULDER1: { x: 1205, y: 760, w: 168, h: 248 },\r\n    BUSH1: { x: 5, y: 1097, w: 240, h: 155 },\r\n    CACTUS: { x: 929, y: 897, w: 235, h: 118 },\r\n    BUSH2: { x: 255, y: 1097, w: 232, h: 152 },\r\n    BILLBOARD03: { x: 5, y: 1262, w: 230, h: 220 },\r\n    BILLBOARD02: { x: 245, y: 1262, w: 215, h: 220 },\r\n    STUMP: { x: 995, y: 330, w: 195, h: 140 },\r\n    SEMI: { x: 1365, y: 490, w: 122, h: 144 },\r\n    TRUCK: { x: 1365, y: 644, w: 100, h: 78 },\r\n    CAR03: { x: 1383, y: 760, w: 88, h: 55 },\r\n    CAR02: { x: 1383, y: 825, w: 80, h: 59 },\r\n    CAR04: { x: 1383, y: 894, w: 80, h: 57 },\r\n    CAR01: { x: 1205, y: 1018, w: 80, h: 56 },\r\n    PLAYER_UPHILL_LEFT: { x: 1383, y: 961, w: 80, h: 45 },\r\n    PLAYER_UPHILL_STRAIGHT: { x: 1295, y: 1018, w: 80, h: 45 },\r\n    PLAYER_UPHILL_RIGHT: { x: 1385, y: 1018, w: 80, h: 45 },\r\n    PLAYER_LEFT: { x: 995, y: 480, w: 80, h: 41 },\r\n    PLAYER_STRAIGHT: { x: 1085, y: 480, w: 80, h: 41 },\r\n    PLAYER_RIGHT: { x: 995, y: 531, w: 80, h: 41 }\r\n};\r\nconst SPRITE_SCALE = 0.3 * (1 / SPRITES.PLAYER_STRAIGHT.w);\r\nconst BILLBOARD_SPRITES = [\r\n    SPRITES.BILLBOARD01, SPRITES.BILLBOARD02, SPRITES.BILLBOARD03,\r\n    SPRITES.BILLBOARD04, SPRITES.BILLBOARD05, SPRITES.BILLBOARD06,\r\n    SPRITES.BILLBOARD07, SPRITES.BILLBOARD08, SPRITES.BILLBOARD09\r\n];\r\nconst PLANT_SPRITES = [\r\n    SPRITES.TREE1, SPRITES.TREE2, SPRITES.DEAD_TREE1, SPRITES.DEAD_TREE2,\r\n    SPRITES.PALM_TREE, SPRITES.BUSH1, SPRITES.BUSH2, SPRITES.CACTUS,\r\n    SPRITES.STUMP, SPRITES.BOULDER1, SPRITES.BOULDER2, SPRITES.BOULDER3\r\n];\r\nconst CAR_SPRITES = [\r\n    SPRITES.CAR01, SPRITES.CAR02, SPRITES.CAR03, SPRITES.CAR04,\r\n    SPRITES.SEMI, SPRITES.TRUCK\r\n];\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/constants.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RacingGame: () => (/* binding */ RacingGame)\n/* harmony export */ });\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\n/* harmony import */ var _Render__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Render */ \"./src/Render.ts\");\n/* harmony import */ var _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RoadBuilder */ \"./src/RoadBuilder.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n/* harmony import */ var _Hud__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hud */ \"./src/Hud.ts\");\n/* harmony import */ var _Polyfill__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Polyfill */ \"./src/Polyfill.ts\");\n/* harmony import */ var _AuthService__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./AuthService */ \"./src/AuthService.ts\");\n/* harmony import */ var _Diff__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Diff */ \"./src/Diff.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n_Polyfill__WEBPACK_IMPORTED_MODULE_7__.Polyfill.applyRequestAnimationFrame();\r\nclass RacingGame {\r\n    constructor() {\r\n        // Basic game settings\r\n        this.fps = 60;\r\n        this.step = 1 / this.fps;\r\n        this.width = 1024;\r\n        this.height = 768;\r\n        // Game physics\r\n        this.centrifugal = 0.3;\r\n        this.skySpeed = 0.001;\r\n        this.hillSpeed = 0.002;\r\n        this.treeSpeed = 0.003;\r\n        // Background positions\r\n        this.skyOffset = 0;\r\n        this.hillOffset = 0;\r\n        this.treeOffset = 0;\r\n        this.background = null;\r\n        this.sprites = null;\r\n        // Road properties\r\n        this.roadWidth = 2000;\r\n        this.lanes = 3;\r\n        this.fieldOfView = 100;\r\n        this.cameraHeight = 1000;\r\n        this.cameraDepth = null;\r\n        this.drawDistance = 300;\r\n        this.fogDensity = 5;\r\n        this.segmentLength = 200;\r\n        this.rumbleLength = 3;\r\n        this.cars = [];\r\n        this.segments = [];\r\n        this.totalCars = 200;\r\n        // Player properties\r\n        this.playerX = 0;\r\n        this.playerZ = null;\r\n        this.position = 0;\r\n        this.speed = 0;\r\n        // Timing\r\n        this.currentLapTime = 0;\r\n        this.lastLapTime = null;\r\n        // Input state\r\n        this.keyLeft = false;\r\n        this.keyRight = false;\r\n        this.keyFaster = false;\r\n        this.keySlower = false;\r\n        this.ASPECT_RATIO = 4 / 3; // Standard 4:3 game ratio\r\n        this.MIN_WIDTH = 640;\r\n        this.MIN_HEIGHT = 480;\r\n        this.currentDifficulty = _Diff__WEBPACK_IMPORTED_MODULE_9__.GameDifficulty.NORMAL;\r\n        // UI\r\n        this.hud = {\r\n            speed: { value: null, dom: null },\r\n            current_lap_time: { value: null, dom: null },\r\n            last_lap_time: { value: null, dom: null },\r\n            fast_lap_time: { value: null, dom: null }\r\n        };\r\n        this.storage = window.localStorage || new Storage();\r\n        this.auth = _AuthService__WEBPACK_IMPORTED_MODULE_8__.AuthService.getInstance();\r\n        this.showLoginScreen();\r\n        this.canvas = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        // Initialize core game properties\r\n        this.maxSpeed = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segmentLength / this.step;\r\n        this.accel = this.maxSpeed / 5;\r\n        this.breaking = -this.maxSpeed;\r\n        this.decel = -this.maxSpeed / 5;\r\n        this.offRoadDecel = -this.maxSpeed / 2;\r\n        this.offRoadLimit = this.maxSpeed / 4;\r\n        this.segments = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments;\r\n        this.trackLength = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength;\r\n        this.cars = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars;\r\n        // Initialize HUD\r\n        this.hud = new _Hud__WEBPACK_IMPORTED_MODULE_6__.Hud();\r\n        // Initialize game\r\n        this.reset();\r\n        this.initializeEventListeners();\r\n        this.setupResponsiveCanvas();\r\n        window.addEventListener('resize', () => this.setupResponsiveCanvas());\r\n    }\r\n    static getInstance() {\r\n        if (!RacingGame.instance) {\r\n            RacingGame.instance = new RacingGame();\r\n        }\r\n        return RacingGame.instance;\r\n    }\r\n    setupResponsiveCanvas() {\r\n        const availableWidth = window.innerWidth;\r\n        const availableHeight = window.innerHeight;\r\n        // Calculate dimensions maintaining aspect ratio\r\n        let gameWidth = availableWidth;\r\n        let gameHeight = gameWidth / this.ASPECT_RATIO;\r\n        // If height exceeds available space, scale based on height\r\n        if (gameHeight > availableHeight) {\r\n            gameHeight = availableHeight;\r\n            gameWidth = gameHeight * this.ASPECT_RATIO;\r\n        }\r\n        // Enforce minimum dimensions\r\n        gameWidth = Math.max(gameWidth, this.MIN_WIDTH);\r\n        gameHeight = Math.max(gameHeight, this.MIN_HEIGHT);\r\n        // Center the game container\r\n        const container = document.getElementById('racer');\r\n        if (container) {\r\n            container.style.width = `${gameWidth}px`;\r\n            container.style.height = `${gameHeight}px`;\r\n            container.style.position = 'absolute';\r\n            container.style.left = `${(availableWidth - gameWidth) / 2}px`;\r\n            container.style.top = `${(availableHeight - gameHeight) / 2}px`;\r\n        }\r\n        // Update canvas dimensions\r\n        this.canvas.width = gameWidth;\r\n        this.canvas.height = gameHeight;\r\n        // Update canvas style\r\n        this.canvas.style.width = '100%';\r\n        this.canvas.style.height = '100%';\r\n        // Update HUD positioning\r\n        const hud = document.getElementById('hud');\r\n        if (hud) {\r\n            hud.style.width = '100%';\r\n            hud.style.position = 'absolute';\r\n            hud.style.top = '0';\r\n        }\r\n        // Reset game with new dimensions\r\n        this.reset({\r\n            width: gameWidth,\r\n            height: gameHeight\r\n        });\r\n    }\r\n    reset(options = {}) {\r\n        // Canvas dimensions\r\n        this.canvas.width = this.width = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.width, this.width);\r\n        this.canvas.height = this.height = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.height, this.height);\r\n        // Road properties\r\n        this.lanes = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.lanes, this.lanes);\r\n        this.roadWidth = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.roadWidth, this.roadWidth);\r\n        this.cameraHeight = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.cameraHeight, this.cameraHeight);\r\n        this.drawDistance = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.drawDistance, this.drawDistance);\r\n        this.fogDensity = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.fogDensity, this.fogDensity);\r\n        this.fieldOfView = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.fieldOfView, this.fieldOfView);\r\n        // Camera calculations\r\n        this.cameraDepth = 1 / Math.tan((this.fieldOfView / 2) * Math.PI / 180);\r\n        this.playerZ = (this.cameraHeight * this.cameraDepth);\r\n        this.resolution = this.height / 480;\r\n        // Reset road if necessary\r\n        if (_RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.getSegments().length === 0 ||\r\n            options.segmentLength ||\r\n            options.rumbleLength) {\r\n            _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.resetRoad();\r\n        }\r\n        // Update UI\r\n        this.refreshTweakUI();\r\n    }\r\n    refreshTweakUI() {\r\n        const lanesElement = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('lanes');\r\n        lanesElement.selectedIndex = this.lanes - 1;\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentRoadWidth', this.roadWidth.toString());\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('roadWidth').value = this.roadWidth.toString();\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentCameraHeight', this.cameraHeight.toString());\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('cameraHeight').value = this.cameraHeight.toString();\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentDrawDistance', this.drawDistance.toString());\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('drawDistance').value = this.drawDistance.toString();\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentFieldOfView', this.fieldOfView.toString());\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('fieldOfView').value = this.fieldOfView.toString();\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentFogDensity', this.fogDensity.toString());\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('fogDensity').value = this.fogDensity.toString();\r\n    }\r\n    update(dt) {\r\n        const playerSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position + this.playerZ);\r\n        const playerW = _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITES.PLAYER_STRAIGHT.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\r\n        const speedPercent = this.speed / this.maxSpeed;\r\n        const dx = dt * 2 * speedPercent;\r\n        const startPosition = this.position;\r\n        // Update cars positions and behavior\r\n        this.updateCars(dt, playerSegment, playerW);\r\n        // Update player position\r\n        this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.position, dt * this.speed, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\r\n        // Handle player steering\r\n        if (this.keyLeft) {\r\n            this.playerX = this.playerX - dx;\r\n        }\r\n        else if (this.keyRight) {\r\n            this.playerX = this.playerX + dx;\r\n        }\r\n        // Apply centrifugal force\r\n        this.playerX = this.playerX - (dx * speedPercent * playerSegment.curve * this.centrifugal);\r\n        // Handle player speed\r\n        if (this.keyFaster) {\r\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.accel, dt);\r\n        }\r\n        else if (this.keySlower) {\r\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.breaking, dt);\r\n        }\r\n        else {\r\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.decel, dt);\r\n        }\r\n        // Handle off-road deceleration and collisions\r\n        // In update method, modify collision check:\r\n        if ((this.playerX < -1) || (this.playerX > 1)) {\r\n            if (this.speed > this.offRoadLimit) {\r\n                this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.offRoadDecel, dt);\r\n            }\r\n            // Sprite collisions\r\n            for (let n = 0; n < playerSegment.sprites.length; n++) {\r\n                const sprite = playerSegment.sprites[n];\r\n                const spriteW = sprite.source.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\r\n                const spriteX = sprite.offset + spriteW / 2 * (sprite.offset > 0 ? 1 : -1);\r\n                if (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, spriteX, spriteW)) {\r\n                    // Instead of immediately resetting position, smoothly reduce speed\r\n                    this.speed = Math.min(this.speed, this.maxSpeed / 5);\r\n                    this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(playerSegment.p1.world.z, -this.playerZ, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\r\n                    // Don't break here - let physics continue\r\n                }\r\n            }\r\n        }\r\n        // Handle collisions with other cars\r\n        for (let n = 0; n < playerSegment.cars.length; n++) {\r\n            const car = playerSegment.cars[n];\r\n            const carW = car.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\r\n            if (this.speed > car.speed) {\r\n                if (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, car.offset, carW, 0.8)) {\r\n                    // Smooth collision response\r\n                    const speedRatio = car.speed / this.speed;\r\n                    this.speed = car.speed * speedRatio;\r\n                    this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(car.z, -this.playerZ, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\r\n                    // Don't break - continue physics\r\n                }\r\n            }\r\n        }\r\n        // Keep player on road and within speed limits - MUST BE AFTER collision handling\r\n        this.playerX = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(this.playerX, -3, 3);\r\n        this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(this.speed, 0, this.maxSpeed);\r\n        // Update background position based on curves\r\n        this.skyOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.skyOffset, this.skySpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\r\n        this.hillOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.hillOffset, this.hillSpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\r\n        this.treeOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.treeOffset, this.treeSpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\r\n        this.updateLapTime(dt, startPosition);\r\n        this.hud.updateHud('speed', 5 * Math.round(this.speed / 500));\r\n    }\r\n    updateLapTime(dt, startPosition) {\r\n        if (this.position > this.playerZ) {\r\n            if (this.currentLapTime && (startPosition < this.playerZ)) {\r\n                this.lastLapTime = this.currentLapTime;\r\n                this.currentLapTime = 0;\r\n                // Update HUD\r\n                this.hud.updateHud('last_lap_time', this.formatTime(this.lastLapTime));\r\n                this.hud.resetValue('current_lap_time');\r\n                _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.show('last_lap_time');\r\n                // Check and update fast lap\r\n                try {\r\n                    const currentFastLap = this.auth.getUserFastLap();\r\n                    if (!currentFastLap || this.lastLapTime < currentFastLap) {\r\n                        this.auth.updateUserFastLap(this.lastLapTime);\r\n                        this.hud.updateHud('fast_lap_time', this.formatTime(this.lastLapTime));\r\n                        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.addClassName('fast_lap_time', 'fastest');\r\n                        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.addClassName('last_lap_time', 'fastest');\r\n                    }\r\n                    else {\r\n                        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.removeClassName('fast_lap_time', 'fastest');\r\n                        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.removeClassName('last_lap_time', 'fastest');\r\n                    }\r\n                }\r\n                catch (error) {\r\n                    console.error('Error updating fast lap:', error);\r\n                }\r\n            }\r\n            else {\r\n                this.currentLapTime += dt;\r\n            }\r\n        }\r\n        this.hud.updateHud('current_lap_time', this.formatTime(this.currentLapTime));\r\n    }\r\n    render() {\r\n        const baseSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position);\r\n        const basePercent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(this.position, this.segmentLength);\r\n        const playerSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position + this.playerZ);\r\n        const playerPercent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(this.position + this.playerZ, this.segmentLength);\r\n        const playerY = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(playerSegment.p1.world.y, playerSegment.p2.world.y, playerPercent);\r\n        let maxy = this.height;\r\n        let x = 0;\r\n        let dx = -(baseSegment.curve * basePercent);\r\n        // Clear canvas\r\n        this.ctx.clearRect(0, 0, this.width, this.height);\r\n        // Render background layers\r\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.SKY, this.skyOffset, this.resolution * this.skySpeed * playerY);\r\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.HILLS, this.hillOffset, this.resolution * this.hillSpeed * playerY);\r\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.TREES, this.treeOffset, this.resolution * this.treeSpeed * playerY);\r\n        // Render road segments\r\n        for (let n = 0; n < this.drawDistance; n++) {\r\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(baseSegment.index + n) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\r\n            segment.looped = segment.index < baseSegment.index;\r\n            segment.fog = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.exponentialFog(n / this.drawDistance, this.fogDensity);\r\n            segment.clip = maxy;\r\n            _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.project(segment.p1, (this.playerX * this.roadWidth) - x, playerY + this.cameraHeight, this.position - (segment.looped ? _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength : 0), this.cameraDepth, this.width, this.height, this.roadWidth);\r\n            _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.project(segment.p2, (this.playerX * this.roadWidth) - x - dx, playerY + this.cameraHeight, this.position - (segment.looped ? _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength : 0), this.cameraDepth, this.width, this.height, this.roadWidth);\r\n            x = x + dx;\r\n            dx = dx + segment.curve;\r\n            // Skip if segment is behind us or outside view\r\n            if ((segment.p1.camera.z <= this.cameraDepth) ||\r\n                (segment.p2.screen.y >= segment.p1.screen.y) ||\r\n                (segment.p2.screen.y >= maxy)) {\r\n                continue;\r\n            }\r\n            // Render segment\r\n            _Render__WEBPACK_IMPORTED_MODULE_1__.Render.segment(this.ctx, this.width, this.lanes, segment.p1.screen.x, segment.p1.screen.y, segment.p1.screen.w, segment.p2.screen.x, segment.p2.screen.y, segment.p2.screen.w, segment.fog, segment.color);\r\n            maxy = segment.p1.screen.y;\r\n        }\r\n        // Render sprites and cars\r\n        for (let n = (this.drawDistance - 1); n > 0; n--) {\r\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(baseSegment.index + n) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\r\n            // Render cars\r\n            for (let i = 0; i < segment.cars.length; i++) {\r\n                const car = segment.cars[i];\r\n                const spriteScale = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.scale, segment.p2.screen.scale, car.percent);\r\n                const spriteX = Math.round(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.x, segment.p2.screen.x, car.percent) +\r\n                    (spriteScale * car.offset * this.roadWidth * this.width / 2));\r\n                const spriteY = Math.round(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.y, segment.p2.screen.y, car.percent));\r\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.sprite(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], car.sprite, spriteScale, spriteX, spriteY, -0.5, -1, segment.clip);\r\n            }\r\n            // Fix sprite positioning in the same way\r\n            for (let i = 0; i < segment.sprites.length; i++) {\r\n                const sprite = segment.sprites[i];\r\n                const spriteScale = segment.p1.screen.scale;\r\n                const spriteX = Math.round(segment.p1.screen.x + (spriteScale * sprite.offset * this.roadWidth * this.width / 2));\r\n                const spriteY = Math.round(segment.p1.screen.y);\r\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.sprite(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], sprite.source, spriteScale, spriteX, spriteY, (sprite.offset < 0 ? -1 : 0), -1, segment.clip);\r\n            }\r\n            // Render player\r\n            if (segment === playerSegment) {\r\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.player(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], this.speed / this.maxSpeed, this.cameraDepth / this.playerZ, this.width / 2, this.height / 2 - (this.cameraDepth / this.playerZ * _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(playerSegment.p1.camera.y, playerSegment.p2.camera.y, playerPercent) * this.height / 2), this.playerX * (this.keyLeft ? -1 : this.keyRight ? 1 : 0), playerSegment.p2.world.y - playerSegment.p1.world.y);\r\n            }\r\n        }\r\n    }\r\n    updateCars(dt, playerSegment, playerW) {\r\n        for (let n = 0; n < _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars.length; n++) {\r\n            const car = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars[n];\r\n            const oldSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(car.z);\r\n            car.offset = car.offset + this.updateCarOffset(car, oldSegment, playerSegment, playerW);\r\n            car.z = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(car.z, dt * car.speed, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\r\n            car.percent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(car.z, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segmentLength);\r\n            const newSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(car.z);\r\n            if (oldSegment !== newSegment) {\r\n                const index = oldSegment.cars.indexOf(car);\r\n                oldSegment.cars.splice(index, 1);\r\n                newSegment.cars.push(car);\r\n            }\r\n        }\r\n    }\r\n    updateCarOffset(car, carSegment, playerSegment, playerW) {\r\n        const lookahead = 20;\r\n        const carW = car.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\r\n        // optimization, dont bother steering around other cars when 'out of sight' of the player\r\n        if ((carSegment.index - playerSegment.index) > this.drawDistance)\r\n            return 0;\r\n        for (let i = 1; i < lookahead; i++) {\r\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(carSegment.index + i) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\r\n            if ((segment === playerSegment) && (car.speed > this.speed) &&\r\n                (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, car.offset, carW, 1.2))) {\r\n                if (this.playerX > 0.5)\r\n                    return -1 / i * (car.speed - this.speed) / this.maxSpeed;\r\n                else if (this.playerX < -0.5)\r\n                    return 1 / i * (car.speed - this.speed) / this.maxSpeed;\r\n                else\r\n                    return (car.offset > this.playerX) ?\r\n                        -1 / i * (car.speed - this.speed) / this.maxSpeed :\r\n                        1 / i * (car.speed - this.speed) / this.maxSpeed;\r\n            }\r\n            for (let j = 0; j < segment.cars.length; j++) {\r\n                const otherCar = segment.cars[j];\r\n                const otherCarW = otherCar.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\r\n                if ((car.speed > otherCar.speed) &&\r\n                    _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(car.offset, carW, otherCar.offset, otherCarW, 1.2)) {\r\n                    if (otherCar.offset > 0.5)\r\n                        return -1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\r\n                    else if (otherCar.offset < -0.5)\r\n                        return 1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\r\n                    else\r\n                        return (car.offset > otherCar.offset) ?\r\n                            1 / i * (car.speed - otherCar.speed) / this.maxSpeed :\r\n                            -1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\r\n                }\r\n            }\r\n        }\r\n        // if no cars ahead, but I have somehow ended up off road, then steer back on\r\n        if (car.offset < -0.9)\r\n            return 0.1;\r\n        else if (car.offset > 0.9)\r\n            return -0.1;\r\n        else\r\n            return 0;\r\n    }\r\n    formatTime(dt) {\r\n        const minutes = Math.floor(dt / 60);\r\n        const seconds = Math.floor(dt - (minutes * 60));\r\n        const tenths = Math.floor(10 * (dt - Math.floor(dt)));\r\n        if (minutes > 0) {\r\n            return `${minutes}.${seconds < 10 ? \"0\" : \"\"}${seconds}.${tenths}`;\r\n        }\r\n        else {\r\n            return `${seconds}.${tenths}`;\r\n        }\r\n    }\r\n    initializeEventListeners() {\r\n        // Resolution change handler\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('resolution', 'change', (ev) => {\r\n            const target = ev.target;\r\n            let w, h;\r\n            switch (target.options[target.selectedIndex].value) {\r\n                case 'fine':\r\n                    w = 1280;\r\n                    h = 960;\r\n                    break;\r\n                case 'high':\r\n                    w = 1024;\r\n                    h = 768;\r\n                    break;\r\n                case 'medium':\r\n                    w = 640;\r\n                    h = 480;\r\n                    break;\r\n                case 'low':\r\n                    w = 480;\r\n                    h = 360;\r\n                    break;\r\n                default:\r\n                    w = 1024;\r\n                    h = 768;\r\n                    break;\r\n            }\r\n            this.reset({ width: w, height: h });\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n        });\r\n        // Other UI controls\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('lanes', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({ lanes: Number(target.options[target.selectedIndex].value) });\r\n        });\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('roadWidth', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({\r\n                roadWidth: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.roadWidth), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 500), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 3000))\r\n            });\r\n        });\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('cameraHeight', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({\r\n                cameraHeight: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.cameraHeight), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 100), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 2000))\r\n            });\r\n        });\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('drawDistance', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({\r\n                drawDistance: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.drawDistance), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 100), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 1000))\r\n            });\r\n        });\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('fieldOfView', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({\r\n                fieldOfView: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.fieldOfView), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 60), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 140))\r\n            });\r\n        });\r\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('fogDensity', 'change', (ev) => {\r\n            const target = ev.target;\r\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\r\n            this.reset({\r\n                fogDensity: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.fogDensity), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 1), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 10))\r\n            });\r\n        });\r\n    }\r\n    showLoginScreen() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const loginOverlay = document.getElementById('loginOverlay');\r\n            const loginButton = document.getElementById('loginButton');\r\n            const guestButton = document.getElementById('guestButton');\r\n            const usernameInput = document.getElementById('username');\r\n            // Remove password field since it's not needed\r\n            const passwordField = document.querySelector('input[type=\"password\"]');\r\n            if (passwordField) {\r\n                passwordField.remove();\r\n            }\r\n            loginButton.onclick = () => {\r\n                const username = usernameInput.value.trim();\r\n                if (username) {\r\n                    this.auth.login(username);\r\n                    loginOverlay.style.display = 'none';\r\n                    this.initializeGame();\r\n                }\r\n            };\r\n            guestButton.onclick = () => {\r\n                this.auth.login('Guest_' + Date.now());\r\n                loginOverlay.style.display = 'none';\r\n                this.initializeGame();\r\n            };\r\n            // Show login overlay\r\n            loginOverlay.style.display = 'flex';\r\n            loginButton.onclick = () => __awaiter(this, void 0, void 0, function* () {\r\n                const username = usernameInput.value.trim();\r\n                if (username) {\r\n                    this.auth.login(username);\r\n                    loginOverlay.style.display = 'none';\r\n                    yield this.showDifficultySelection();\r\n                    this.initializeGame();\r\n                }\r\n            });\r\n            guestButton.onclick = () => __awaiter(this, void 0, void 0, function* () {\r\n                this.auth.login('Guest_' + Date.now());\r\n                loginOverlay.style.display = 'none';\r\n                yield this.showDifficultySelection();\r\n                this.initializeGame();\r\n            });\r\n        });\r\n    }\r\n    initializeGame() {\r\n        const settings = _Diff__WEBPACK_IMPORTED_MODULE_9__.DIFFICULTY_SETTINGS[this.currentDifficulty];\r\n        this.fogDensity = settings.fogDensity;\r\n        this.drawDistance = settings.drawDistance;\r\n        _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.setTotalCars(settings.totalCars);\r\n        this.canvas = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('canvas');\r\n        this.ctx = this.canvas.getContext('2d');\r\n        // Initialize core game properties\r\n        this.maxSpeed = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segmentLength / this.step;\r\n        this.accel = this.maxSpeed / 5;\r\n        this.breaking = -this.maxSpeed;\r\n        this.decel = -this.maxSpeed / 5;\r\n        this.offRoadDecel = -this.maxSpeed / 2;\r\n        this.offRoadLimit = this.maxSpeed / 4;\r\n        this.segments = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments;\r\n        this.trackLength = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength;\r\n        this.cars = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars;\r\n        this.hud = new _Hud__WEBPACK_IMPORTED_MODULE_6__.Hud();\r\n        this.reset();\r\n        this.initializeEventListeners();\r\n        this.setupResponsiveCanvas();\r\n        window.addEventListener('resize', () => this.setupResponsiveCanvas());\r\n        // Start game\r\n        const userFastLap = this.auth.getUserFastLap();\r\n        if (userFastLap) {\r\n            this.hud.updateHud('fast_lap_time', this.formatTime(userFastLap));\r\n        }\r\n        else {\r\n            this.hud.updateHud('fast_lap_time', 'NULL');\r\n        }\r\n        this.start();\r\n    }\r\n    showDifficultySelection() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const html = `\r\n      <div id=\"difficultyOverlay\" class=\"difficulty-overlay\">\r\n        <div class=\"difficulty-form\">\r\n          <h2>Select Difficulty</h2>\r\n          <div class=\"difficulty-buttons\">\r\n            <button data-difficulty=\"${_Diff__WEBPACK_IMPORTED_MODULE_9__.GameDifficulty.EASY}\">Easy</button>\r\n            <button data-difficulty=\"${_Diff__WEBPACK_IMPORTED_MODULE_9__.GameDifficulty.NORMAL}\">Normal</button>\r\n            <button data-difficulty=\"${_Diff__WEBPACK_IMPORTED_MODULE_9__.GameDifficulty.HARD}\">Hard</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    `;\r\n            const overlay = document.createElement('div');\r\n            overlay.innerHTML = html;\r\n            document.body.appendChild(overlay.firstElementChild);\r\n            return new Promise((resolve) => {\r\n                const buttons = document.querySelectorAll('[data-difficulty]');\r\n                buttons.forEach(button => {\r\n                    button.addEventListener('click', () => {\r\n                        var _a;\r\n                        const difficulty = button.getAttribute('data-difficulty');\r\n                        this.currentDifficulty = difficulty;\r\n                        this.auth.setDifficulty(difficulty);\r\n                        // Update HUD with current difficulty's fast lap immediately\r\n                        const userFastLap = this.auth.getUserFastLap();\r\n                        this.hud.updateHud('fast_lap_time', userFastLap ? this.formatTime(userFastLap) : 'NULL');\r\n                        (_a = document.getElementById('difficultyOverlay')) === null || _a === void 0 ? void 0 : _a.remove();\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }\r\n    start() {\r\n        _Game__WEBPACK_IMPORTED_MODULE_0__.Game.run({\r\n            canvas: this.canvas,\r\n            render: () => this.render(),\r\n            update: (dt) => this.update(dt),\r\n            stats: _Game__WEBPACK_IMPORTED_MODULE_0__.Game.stats('fps'),\r\n            step: this.step,\r\n            images: [\"background\", \"sprites\"],\r\n            keys: [\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.LEFT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.A], mode: 'down', action: () => { this.keyLeft = true; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.RIGHT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.D], mode: 'down', action: () => { this.keyRight = true; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.UP, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.W], mode: 'down', action: () => { this.keyFaster = true; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.DOWN, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.S], mode: 'down', action: () => { this.keySlower = true; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.LEFT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.A], mode: 'up', action: () => { this.keyLeft = false; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.RIGHT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.D], mode: 'up', action: () => { this.keyRight = false; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.UP, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.W], mode: 'up', action: () => { this.keyFaster = false; } },\r\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.DOWN, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.S], mode: 'up', action: () => { this.keySlower = false; } }\r\n            ],\r\n            ready: (images) => {\r\n                this.background = images[0];\r\n                this.sprites = images[1];\r\n                this.reset();\r\n                // Initialize fast lap time if not set\r\n                // Dom.storage.fast_lap_time = Dom.storage.fast_lap_time || '180';\r\n                // this.hud.updateHud('fast_lap_time', \r\n                //   this.formatTime(Util.toFloat(Dom.storage.fast_lap_time, 180)));\r\n                const music = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('music');\r\n                if (music) {\r\n                    const storedMuted = localStorage.getItem('muted');\r\n                    music.muted = storedMuted === 'true';\r\n                    if (!music.muted) {\r\n                        const playPromise = music.play();\r\n                        if (playPromise) {\r\n                            playPromise.catch(console.error);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\nRacingGame.instance = null;\r\nconst game = RacingGame.getInstance();\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/index.ts?");

/***/ }),

/***/ "./src/stats/Stats.ts":
/*!****************************!*\
  !*** ./src/stats/Stats.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stats: () => (/* binding */ Stats)\n/* harmony export */ });\nclass Stats {\r\n    constructor() {\r\n        this.startTime = Date.now();\r\n        this.prevTime = this.startTime;\r\n        this.ms = 0;\r\n        this.msMin = 1000;\r\n        this.msMax = 0;\r\n        this.fps = 0;\r\n        this.fpsMin = 1000;\r\n        this.fpsMax = 0;\r\n        this.frames = 0;\r\n        this.mode = 0;\r\n        this.initializeDOM();\r\n    }\r\n    static getInstance() {\r\n        if (!Stats.instance) {\r\n            Stats.instance = new Stats();\r\n        }\r\n        return Stats.instance;\r\n    }\r\n    initializeDOM() {\r\n        // Container\r\n        this.container = document.createElement('div');\r\n        this.container.id = 'stats';\r\n        this.container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\r\n        this.container.addEventListener('mousedown', (event) => {\r\n            event.preventDefault();\r\n            this.setMode((++this.mode) % 2);\r\n        });\r\n        // FPS\r\n        this.fpsDiv = document.createElement('div');\r\n        this.fpsDiv.id = 'fps';\r\n        this.fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\r\n        this.fpsText = document.createElement('div');\r\n        this.fpsText.id = 'fpsText';\r\n        this.fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\r\n        this.fpsText.innerHTML = 'FPS';\r\n        this.fpsGraph = document.createElement('div');\r\n        this.fpsGraph.id = 'fpsGraph';\r\n        this.fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\r\n        // MS\r\n        this.msDiv = document.createElement('div');\r\n        this.msDiv.id = 'ms';\r\n        this.msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\r\n        this.msText = document.createElement('div');\r\n        this.msText.id = 'msText';\r\n        this.msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\r\n        this.msText.innerHTML = 'MS';\r\n        this.msGraph = document.createElement('div');\r\n        this.msGraph.id = 'msGraph';\r\n        this.msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\r\n        // Build DOM hierarchy\r\n        this.fpsDiv.appendChild(this.fpsText);\r\n        this.fpsDiv.appendChild(this.fpsGraph);\r\n        this.msDiv.appendChild(this.msText);\r\n        this.msDiv.appendChild(this.msGraph);\r\n        this.container.appendChild(this.fpsDiv);\r\n        this.container.appendChild(this.msDiv);\r\n        // Create graph bars\r\n        this.createBars(this.fpsGraph);\r\n        this.createBars(this.msGraph);\r\n        document.body.appendChild(this.container);\r\n    }\r\n    createBars(graph) {\r\n        for (let i = 0; i < 74; i++) {\r\n            const bar = document.createElement('span');\r\n            bar.style.cssText = `width:1px;height:30px;float:left;background-color:${graph.id === 'fpsGraph' ? '#113' : '#131'}`;\r\n            graph.appendChild(bar);\r\n        }\r\n    }\r\n    setMode(value) {\r\n        this.mode = value;\r\n        switch (this.mode) {\r\n            case 0:\r\n                this.fpsDiv.style.display = 'block';\r\n                this.msDiv.style.display = 'none';\r\n                break;\r\n            case 1:\r\n                this.fpsDiv.style.display = 'none';\r\n                this.msDiv.style.display = 'block';\r\n                break;\r\n        }\r\n    }\r\n    updateGraph(dom, value) {\r\n        const child = dom.appendChild(dom.firstChild);\r\n        child.style.height = `${value}px`;\r\n    }\r\n    current() {\r\n        return this.fps;\r\n    }\r\n    begin() {\r\n        this.startTime = Date.now();\r\n    }\r\n    end() {\r\n        const time = Date.now();\r\n        this.ms = time - this.startTime;\r\n        this.msMin = Math.min(this.msMin, this.ms);\r\n        this.msMax = Math.max(this.msMax, this.ms);\r\n        this.msText.textContent = `${this.ms} MS (${this.msMin}-${this.msMax})`;\r\n        this.updateGraph(this.msGraph, Math.min(30, 30 - (this.ms / 200) * 30));\r\n        this.frames++;\r\n        if (time > this.prevTime + 1000) {\r\n            this.fps = Math.round((this.frames * 1000) / (time - this.prevTime));\r\n            this.fpsMin = Math.min(this.fpsMin, this.fps);\r\n            this.fpsMax = Math.max(this.fpsMax, this.fps);\r\n            this.fpsText.textContent = `${this.fps} FPS (${this.fpsMin}-${this.fpsMax})`;\r\n            this.updateGraph(this.fpsGraph, Math.min(30, 30 - (this.fps / 100) * 30));\r\n            this.prevTime = time;\r\n            this.frames = 0;\r\n        }\r\n        return time;\r\n    }\r\n    update() {\r\n        this.startTime = this.end();\r\n    }\r\n    get domElement() {\r\n        return this.container;\r\n    }\r\n}\r\nStats.instance = null;\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/stats/Stats.ts?");

/***/ }),

/***/ "./src/utils/Dom.ts":
/*!**************************!*\
  !*** ./src/utils/Dom.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dom: () => (/* binding */ Dom)\n/* harmony export */ });\nclass Dom {\r\n    static get(id) {\r\n        if (id instanceof HTMLElement || id === document)\r\n            return id;\r\n        return document.getElementById(id);\r\n    }\r\n    static set(id, html) {\r\n        this.get(id).innerHTML = html;\r\n    }\r\n    static on(ele, type, fn, capture) {\r\n        this.get(ele).addEventListener(type, fn, capture);\r\n    }\r\n    static un(ele, type, fn, capture) {\r\n        this.get(ele).removeEventListener(type, fn, capture);\r\n    }\r\n    static show(ele, type) {\r\n        this.get(ele).style.display = type || 'block';\r\n    }\r\n    static blur(ev) {\r\n        ev.target.blur();\r\n    }\r\n    static addClassName(ele, name) {\r\n        this.toggleClassName(ele, name, true);\r\n    }\r\n    static removeClassName(ele, name) {\r\n        this.toggleClassName(ele, name, false);\r\n    }\r\n    static toggleClassName(ele, name, on) {\r\n        const element = this.get(ele);\r\n        console.log('Toggle class - Element:', element);\r\n        console.log('Toggle class - Name:', name);\r\n        console.log('Toggle class - On:', on);\r\n        const classes = element.className.split(' ');\r\n        const n = classes.indexOf(name);\r\n        const forceOn = (typeof on === 'undefined') ? (n < 0) : on;\r\n        console.log('Current classes:', classes);\r\n        console.log('Class index:', n);\r\n        console.log('Force on:', forceOn);\r\n        if (forceOn && n < 0) {\r\n            classes.push(name);\r\n            console.log('Added class');\r\n        }\r\n        else if (!forceOn && n >= 0) {\r\n            classes.splice(n, 1);\r\n            console.log('Removed class');\r\n        }\r\n        element.className = classes.join(' ');\r\n        console.log('Final classes:', element.className);\r\n    }\r\n}\r\nDom.storage = window.localStorage || {};\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/utils/Dom.ts?");

/***/ }),

/***/ "./src/utils/Util.ts":
/*!***************************!*\
  !*** ./src/utils/Util.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Util: () => (/* binding */ Util)\n/* harmony export */ });\nclass Util {\r\n    static timestamp() {\r\n        return new Date().getTime();\r\n    }\r\n    static toInt(obj, def) {\r\n        if (obj !== null && !isNaN(obj))\r\n            return parseInt(obj, 10);\r\n        return def || 0;\r\n    }\r\n    static toFloat(obj, def) {\r\n        if (obj !== null && !isNaN(obj))\r\n            return parseFloat(obj);\r\n        return def || 0.0;\r\n    }\r\n    static limit(value, min, max) {\r\n        return Math.max(min, Math.min(value, max));\r\n    }\r\n    static randomInt(min, max) {\r\n        return Math.round(this.interpolate(min, max, Math.random()));\r\n    }\r\n    static randomChoice(options) {\r\n        return options[this.randomInt(0, options.length - 1)];\r\n    }\r\n    static percentRemaining(n, total) {\r\n        return (n % total) / total;\r\n    }\r\n    static accelerate(v, accel, dt) {\r\n        return v + accel * dt;\r\n    }\r\n    static interpolate(a, b, percent) {\r\n        return a + (b - a) * percent;\r\n    }\r\n    static easeIn(a, b, percent) {\r\n        return a + (b - a) * Math.pow(percent, 2);\r\n    }\r\n    static easeOut(a, b, percent) {\r\n        return a + (b - a) * (1 - Math.pow(1 - percent, 2));\r\n    }\r\n    static easeInOut(a, b, percent) {\r\n        return a + (b - a) * ((-Math.cos(percent * Math.PI) / 2) + 0.5);\r\n    }\r\n    static exponentialFog(distance, density) {\r\n        return 1 / (Math.pow(Math.E, distance * distance * density));\r\n    }\r\n    static increase(start, increment, max) {\r\n        let result = start + increment;\r\n        while (result >= max)\r\n            result -= max;\r\n        while (result < 0)\r\n            result += max;\r\n        return result;\r\n    }\r\n    static project(p, cameraX, cameraY, cameraZ, cameraDepth, width, height, roadWidth) {\r\n        p.camera.x = (p.world.x || 0) - cameraX;\r\n        p.camera.y = (p.world.y || 0) - cameraY;\r\n        p.camera.z = (p.world.z || 0) - cameraZ;\r\n        p.screen.scale = cameraDepth / p.camera.z;\r\n        p.screen.x = Math.round((width / 2) + (p.screen.scale * p.camera.x * width / 2));\r\n        p.screen.y = Math.round((height / 2) - (p.screen.scale * p.camera.y * height / 2));\r\n        p.screen.w = Math.round((p.screen.scale * roadWidth * width / 2));\r\n    }\r\n    static overlap(x1, w1, x2, w2, percent = 1) {\r\n        const half = percent / 2;\r\n        const min1 = x1 - (w1 * half);\r\n        const max1 = x1 + (w1 * half);\r\n        const min2 = x2 - (w2 * half);\r\n        const max2 = x2 + (w2 * half);\r\n        return !(max1 < min2 || min1 > max2);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://javascript-racer/./src/utils/Util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;