/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Game.ts":
/*!*********************!*\
  !*** ./src/Game.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Game: () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n/* harmony import */ var _stats_Stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stats/Stats */ \"./src/stats/Stats.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\n\n\nclass Game {\n    constructor() { }\n    static run(options) {\n        this.loadImages(options.images, (images) => {\n            options.ready(images);\n            this.setKeyListener(options.keys);\n            let last = _utils_Util__WEBPACK_IMPORTED_MODULE_2__.Util.timestamp();\n            let now;\n            let dt = 0;\n            let gdt = 0;\n            const frame = () => {\n                now = _utils_Util__WEBPACK_IMPORTED_MODULE_2__.Util.timestamp();\n                dt = Math.min(1, (now - last) / 1000);\n                gdt = gdt + dt;\n                while (gdt > options.step) {\n                    gdt = gdt - options.step;\n                    options.update(options.step);\n                }\n                options.render();\n                options.stats.update();\n                last = now;\n                requestAnimationFrame(frame);\n            };\n            frame();\n            this.playMusic();\n        });\n    }\n    static loadImages(names, callback) {\n        const result = [];\n        let count = names.length;\n        const onload = () => {\n            if (--count === 0) {\n                callback(result);\n            }\n        };\n        names.forEach((name, index) => {\n            result[index] = new Image();\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.on(result[index], 'load', onload);\n            // Update image path to use relative path\n            result[index].src = `./images/${name}.png`;\n        });\n    }\n    static setKeyListener(keys) {\n        const onkey = (keyCode, mode) => {\n            keys.forEach(k => {\n                k.mode = k.mode || 'up';\n                if ((k.key === keyCode) || (k.keys && k.keys.includes(keyCode))) {\n                    if (k.mode === mode) {\n                        k.action();\n                    }\n                }\n            });\n        };\n        document.addEventListener('keydown', (ev) => onkey(ev.keyCode, 'down'));\n        document.addEventListener('keyup', (ev) => onkey(ev.keyCode, 'up'));\n    }\n    static stats(parentId, id) {\n        const result = new _stats_Stats__WEBPACK_IMPORTED_MODULE_1__.Stats();\n        result.domElement.id = id || 'stats';\n        const parent = _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get(parentId);\n        if (parent) {\n            parent.appendChild(result.domElement);\n            const msg = document.createElement('div');\n            msg.style.cssText = \"border: 2px solid gray; padding: 5px; margin-top: 5px; text-align: left; font-size: 1.15em; text-align: right;\";\n            msg.innerHTML = \"Your canvas performance is \";\n            parent.appendChild(msg);\n            const value = document.createElement('span');\n            value.innerHTML = \"...\";\n            msg.appendChild(value);\n            setInterval(() => {\n                const fps = result.current();\n                const ok = (fps > 50) ? 'good' : (fps < 30) ? 'bad' : 'ok';\n                const color = (fps > 50) ? 'green' : (fps < 30) ? 'red' : 'gray';\n                value.innerHTML = ok;\n                value.style.color = color;\n                msg.style.borderColor = color;\n            }, 5000);\n        }\n        return result;\n    }\n    static playMusic() {\n        const storage = _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.storage;\n        const music = _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('music');\n        if (music) {\n            music.loop = true;\n            music.volume = 0.05;\n            music.muted = (storage.muted === \"true\");\n            // Add user interaction check\n            const startMusic = () => {\n                music.play().catch(() => {\n                    // Ignore failed play attempt\n                    console.log(\"Music autoplay blocked - waiting for user interaction\");\n                });\n            };\n            // Try to play initially\n            startMusic();\n            // Add multiple event listeners for user interaction\n            const userInteractionEvents = ['click', 'touchstart', 'keydown'];\n            const startMusicOnce = () => {\n                startMusic();\n                userInteractionEvents.forEach(event => {\n                    document.removeEventListener(event, startMusicOnce);\n                });\n            };\n            userInteractionEvents.forEach(event => {\n                document.addEventListener(event, startMusicOnce);\n            });\n            // Mute button functionality\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.toggleClassName('mute', 'on', music.muted);\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.on('mute', 'click', () => {\n                storage.muted = String(music.muted = !music.muted);\n                _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.toggleClassName('mute', 'on', music.muted);\n            });\n        }\n    }\n}\nGame.instance = null;\n\n\n//# sourceURL=webpack://javascript-racer/./src/Game.ts?");

/***/ }),

/***/ "./src/Hud.ts":
/*!********************!*\
  !*** ./src/Hud.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Hud: () => (/* binding */ Hud)\n/* harmony export */ });\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n\nclass Hud {\n    constructor() {\n        this.items = {\n            speed: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('speed_value') },\n            current_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('current_lap_time_value') },\n            last_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('last_lap_time_value') },\n            fast_lap_time: { value: null, dom: _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.get('fast_lap_time_value') }\n        };\n    }\n    updateHud(key, value) {\n        if (this.items[key] && this.items[key].value !== value) {\n            this.items[key].value = value;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_0__.Dom.set(this.items[key].dom, String(value));\n        }\n    }\n}\n\n\n//# sourceURL=webpack://javascript-racer/./src/Hud.ts?");

/***/ }),

/***/ "./src/Polyfill.ts":
/*!*************************!*\
  !*** ./src/Polyfill.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Polyfill: () => (/* binding */ Polyfill)\n/* harmony export */ });\nclass Polyfill {\n    static applyRequestAnimationFrame() {\n        if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = window.webkitRequestAnimationFrame\n                || window.mozRequestAnimationFrame\n                || window.oRequestAnimationFrame\n                || window.msRequestAnimationFrame\n                || function (callback) {\n                    window.setTimeout(callback, 1000 / 60);\n                };\n        }\n    }\n}\n\n\n//# sourceURL=webpack://javascript-racer/./src/Polyfill.ts?");

/***/ }),

/***/ "./src/Render.ts":
/*!***********************!*\
  !*** ./src/Render.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Render: () => (/* binding */ Render)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\n\nclass Render {\n    static rumbleWidth(projectedRoadWidth, lanes) {\n        return projectedRoadWidth / Math.max(6, 2 * lanes);\n    }\n    static laneMarkerWidth(projectedRoadWidth, lanes) {\n        return projectedRoadWidth / Math.max(32, 8 * lanes);\n    }\n    static polygon(ctx, x1, y1, x2, y2, x3, y3, x4, y4, color) {\n        ctx.fillStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.lineTo(x3, y3);\n        ctx.lineTo(x4, y4);\n        ctx.closePath();\n        ctx.fill();\n    }\n    static segment(ctx, width, lanes, x1, y1, w1, x2, y2, w2, fog, color) {\n        const r1 = this.rumbleWidth(w1, lanes);\n        const r2 = this.rumbleWidth(w2, lanes);\n        const l1 = this.laneMarkerWidth(w1, lanes);\n        const l2 = this.laneMarkerWidth(w2, lanes);\n        ctx.fillStyle = color.grass;\n        ctx.fillRect(0, y2, width, y1 - y2);\n        this.polygon(ctx, x1 - w1 - r1, y1, x1 - w1, y1, x2 - w2, y2, x2 - w2 - r2, y2, color.rumble);\n        this.polygon(ctx, x1 + w1 + r1, y1, x1 + w1, y1, x2 + w2, y2, x2 + w2 + r2, y2, color.rumble);\n        this.polygon(ctx, x1 - w1, y1, x1 + w1, y1, x2 + w2, y2, x2 - w2, y2, color.road);\n        if (color.lane) {\n            const lanew1 = w1 * 2 / lanes;\n            const lanew2 = w2 * 2 / lanes;\n            let lanex1 = x1 - w1 + lanew1;\n            let lanex2 = x2 - w2 + lanew2;\n            for (let lane = 1; lane < lanes; lanex1 += lanew1, lanex2 += lanew2, lane++) {\n                this.polygon(ctx, lanex1 - l1 / 2, y1, lanex1 + l1 / 2, y1, lanex2 + l2 / 2, y2, lanex2 - l2 / 2, y2, color.lane);\n            }\n        }\n        this.fog(ctx, 0, y1, width, y2 - y1, fog);\n    }\n    static background(ctx, background, width, height, layer, rotation = 0, offset = 0) {\n        const imageW = layer.w / 2;\n        const imageH = layer.h;\n        const sourceX = layer.x + Math.floor(layer.w * rotation);\n        const sourceY = layer.y;\n        const sourceW = Math.min(imageW, layer.x + layer.w - sourceX);\n        const sourceH = imageH;\n        const destX = 0;\n        const destY = offset;\n        const destW = Math.floor(width * (sourceW / imageW));\n        const destH = height;\n        ctx.drawImage(background, sourceX, sourceY, sourceW, sourceH, destX, destY, destW, destH);\n        if (sourceW < imageW) {\n            ctx.drawImage(background, layer.x, sourceY, imageW - sourceW, sourceH, destW - 1, destY, width - destW, destH);\n        }\n    }\n    static sprite(ctx, width, height, resolution, roadWidth, sprites, sprite, scale, destX, destY, offsetX = 0, offsetY = 0, clipY) {\n        const destW = (sprite.w * scale * width / 2) * (_constants__WEBPACK_IMPORTED_MODULE_0__.SPRITE_SCALE * roadWidth);\n        const destH = (sprite.h * scale * width / 2) * (_constants__WEBPACK_IMPORTED_MODULE_0__.SPRITE_SCALE * roadWidth);\n        destX = destX + (destW * offsetX);\n        destY = destY + (destH * offsetY);\n        const clipH = clipY ? Math.max(0, destY + destH - clipY) : 0;\n        if (clipH < destH) {\n            ctx.drawImage(sprites[0], sprite.x, sprite.y, sprite.w, sprite.h - (sprite.h * clipH / destH), destX | 0, // Force integer positions\n            destY | 0, destW | 0, (destH - clipH) | 0);\n        }\n    }\n    static player(ctx, width, height, resolution, roadWidth, sprites, speedPercent, scale, destX, destY, steer, updown) {\n        const bounce = (1.5 * Math.random() * speedPercent * resolution) * _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([-1, 1]);\n        let sprite;\n        if (steer < 0) {\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_LEFT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_LEFT;\n        }\n        else if (steer > 0) {\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_RIGHT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_RIGHT;\n        }\n        else {\n            sprite = (updown > 0) ? _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_UPHILL_STRAIGHT : _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PLAYER_STRAIGHT;\n        }\n        this.sprite(ctx, width, height, resolution, roadWidth, sprites, sprite, scale, destX, destY + bounce, -0.5, -1);\n    }\n    static fog(ctx, x, y, width, height, fog) {\n        if (fog < 1) {\n            ctx.globalAlpha = (1 - fog);\n            ctx.fillStyle = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.FOG;\n            ctx.fillRect(x, y, width, height);\n            ctx.globalAlpha = 1;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://javascript-racer/./src/Render.ts?");

/***/ }),

/***/ "./src/RoadBuilder.ts":
/*!****************************!*\
  !*** ./src/RoadBuilder.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ROAD: () => (/* binding */ ROAD),\n/* harmony export */   RoadBuilder: () => (/* binding */ RoadBuilder)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n\n\nconst ROAD = {\n    LENGTH: {\n        NONE: 0,\n        SHORT: 25,\n        MEDIUM: 50,\n        LONG: 100\n    },\n    HILL: {\n        NONE: 0,\n        LOW: 20,\n        MEDIUM: 40,\n        HIGH: 60\n    },\n    CURVE: {\n        NONE: 0,\n        EASY: 2,\n        MEDIUM: 4,\n        HARD: 6\n    }\n};\nclass RoadBuilder {\n    static getSegments() {\n        return this.segments;\n    }\n    static lastY() {\n        return this.segments.length === 0 ? 0 : this.segments[this.segments.length - 1].p2.world.y;\n    }\n    static addSegment(curve, y) {\n        const n = this.segments.length;\n        this.segments.push({\n            index: n,\n            p1: {\n                world: { y: this.lastY(), z: n * this.segmentLength },\n                camera: {},\n                screen: {}\n            },\n            p2: {\n                world: { y: y, z: (n + 1) * this.segmentLength },\n                camera: {},\n                screen: {}\n            },\n            curve: curve,\n            sprites: [],\n            cars: [],\n            color: Math.floor(n / this.rumbleLength) % 2 ? _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.DARK : _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.LIGHT\n        });\n    }\n    static addRoad(enter, hold, leave, curve, y) {\n        const startY = this.lastY();\n        const endY = startY + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.toInt(y, 0) * this.segmentLength;\n        const total = enter + hold + leave;\n        for (let n = 0; n < enter; n++)\n            this.addSegment(_utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeIn(0, curve, n / enter), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, n / total));\n        for (let n = 0; n < hold; n++)\n            this.addSegment(curve, _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, (enter + n) / total));\n        for (let n = 0; n < leave; n++)\n            this.addSegment(_utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(curve, 0, n / leave), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.easeInOut(startY, endY, (enter + hold + n) / total));\n    }\n    static addStraight(num) {\n        num = num || this.rumbleLength;\n        this.addRoad(num, num, num, 0, 0);\n    }\n    static addHill(num, height) {\n        num = num || this.rumbleLength;\n        height = height || 0;\n        this.addRoad(num, num, num, 0, height);\n    }\n    static addCurve(num, curve, height) {\n        num = num || this.rumbleLength;\n        curve = curve || 0;\n        height = height || 0;\n        this.addRoad(num, num, num, curve, height);\n    }\n    static addLowRollingHills(num, height) {\n        num = num || this.rumbleLength;\n        height = height || 0;\n        this.addRoad(num, num, num, 0, height / 2);\n        this.addRoad(num, num, num, 0, -height);\n        this.addRoad(num, num, num, 0, height);\n        this.addRoad(num, num, num, 0, 0);\n        this.addRoad(num, num, num, 0, height / 2);\n        this.addRoad(num, num, num, 0, 0);\n    }\n    static addSCurves() {\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, -2, 0);\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, 2, 0);\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, -2, 0);\n        this.addRoad(this.rumbleLength, this.rumbleLength, this.rumbleLength, 2, 0);\n    }\n    static addDownhillToEnd(num) {\n        num = num || 200;\n        this.addRoad(num, num, num, 0, -this.lastY() / this.segmentLength);\n    }\n    static addSprite(n, sprite, offset) {\n        this.segments[n].sprites.push({ source: sprite, offset: offset });\n    }\n    static addCar(n, sprite, offset) {\n        const car = { offset: offset, z: 0, sprite: sprite };\n        this.segments[n].cars.push(car);\n    }\n    static addBumps() {\n        this.addRoad(10, 10, 10, 0, 5);\n        this.addRoad(10, 10, 10, 0, -2);\n        this.addRoad(10, 10, 10, 0, -5);\n        this.addRoad(10, 10, 10, 0, 8);\n        this.addRoad(10, 10, 10, 0, 5);\n        this.addRoad(10, 10, 10, 0, -7);\n        this.addRoad(10, 10, 10, 0, 5);\n        this.addRoad(10, 10, 10, 0, -2);\n    }\n    static resetRoad() {\n        this.segments = [];\n        this.addStraight(ROAD.LENGTH.SHORT);\n        this.addLowRollingHills(ROAD.LENGTH.SHORT, ROAD.HILL.LOW);\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.MEDIUM, ROAD.CURVE.MEDIUM, ROAD.HILL.LOW);\n        this.addBumps();\n        this.addLowRollingHills(ROAD.LENGTH.MEDIUM, ROAD.HILL.MEDIUM);\n        this.addCurve(ROAD.LENGTH.LONG * 2, ROAD.CURVE.MEDIUM, ROAD.HILL.MEDIUM);\n        this.addStraight(ROAD.LENGTH.MEDIUM);\n        this.addHill(ROAD.LENGTH.MEDIUM, ROAD.HILL.HIGH);\n        this.addSCurves();\n        this.addCurve(ROAD.LENGTH.LONG, -ROAD.CURVE.MEDIUM, ROAD.HILL.NONE);\n        this.addHill(ROAD.LENGTH.LONG, ROAD.HILL.HIGH);\n        this.addCurve(ROAD.LENGTH.LONG, ROAD.CURVE.MEDIUM, -ROAD.HILL.LOW);\n        this.addBumps();\n        this.addHill(ROAD.LENGTH.LONG, -ROAD.HILL.MEDIUM);\n        this.addStraight(ROAD.LENGTH.MEDIUM);\n        this.addSCurves();\n        this.addDownhillToEnd(200);\n        this.resetSprites();\n        this.resetCars();\n        this.segments[this.findSegment(this.playerZ).index + 2].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.START;\n        this.segments[this.findSegment(this.playerZ).index + 3].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.START;\n        for (let n = 0; n < this.rumbleLength; n++) {\n            this.segments[this.segments.length - 1 - n].color = _constants__WEBPACK_IMPORTED_MODULE_0__.COLORS.FINISH;\n        }\n        this.trackLength = this.segments.length * this.segmentLength;\n    }\n    static resetSprites() {\n        // Add billboards\n        this.addSprite(20, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -2);\n        this.addSprite(40, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, -2);\n        this.addSprite(60, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD08, -2);\n        this.addSprite(80, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD09, -2);\n        this.addSprite(100, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD01, -2);\n        this.addSprite(120, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD02, -2);\n        this.addSprite(140, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD03, -2);\n        this.addSprite(160, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD04, -2);\n        this.addSprite(180, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD05, -2);\n        this.addSprite(240, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -1.2);\n        this.addSprite(240, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, 1.2);\n        this.addSprite(this.segments.length - 25, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD07, -1.2);\n        this.addSprite(this.segments.length - 25, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.BILLBOARD06, 1.2);\n        // Add palm trees\n        for (let n = 10; n < 200; n += 4 + Math.floor(n / 100)) {\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PALM_TREE, 0.5 + Math.random() * 0.5);\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.PALM_TREE, 1 + Math.random() * 2);\n        }\n        // Add some plants\n        for (let n = 250; n < 1000; n += 5) {\n            this.addSprite(n, _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.COLUMN, 1.1);\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 5), _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.TREE1, -1 - Math.random() * 2);\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 5), _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.TREE2, -1 - Math.random() * 2);\n        }\n        for (let n = 200; n < this.segments.length; n += 3) {\n            this.addSprite(n, _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.PLANT_SPRITES), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([1, -1]) * (2 + Math.random() * 5));\n        }\n        // Add roadside objects\n        for (let n = 1000; n < (this.segments.length - 50); n += 100) {\n            const side = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([1, -1]);\n            this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 50), _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.BILLBOARD_SPRITES), -side);\n            for (let i = 0; i < 20; i++) {\n                const sprite = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.PLANT_SPRITES);\n                const offset = side * (1.5 + Math.random());\n                this.addSprite(n + _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomInt(0, 50), sprite, offset);\n            }\n        }\n    }\n    static resetCars() {\n        this.cars = [];\n        for (let n = 0; n < this.totalCars; n++) {\n            const offset = Math.random() * _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice([-0.8, 0.8]);\n            const z = Math.floor(Math.random() * this.segments.length) * this.segmentLength;\n            const sprite = _utils_Util__WEBPACK_IMPORTED_MODULE_1__.Util.randomChoice(_constants__WEBPACK_IMPORTED_MODULE_0__.CAR_SPRITES);\n            const speed = this.maxSpeed / 4 + Math.random() * this.maxSpeed / (sprite === _constants__WEBPACK_IMPORTED_MODULE_0__.SPRITES.SEMI ? 4 : 2);\n            const car = { offset, z, sprite, speed, percent: 0 };\n            const segment = this.findSegment(car.z);\n            segment.cars.push(car);\n            this.cars.push(car);\n        }\n    }\n    static findSegment(z) {\n        return this.segments[Math.floor(z / this.segmentLength) % this.segments.length];\n    }\n}\nRoadBuilder.segments = [];\nRoadBuilder.segmentLength = 200;\nRoadBuilder.rumbleLength = 3;\nRoadBuilder.playerZ = 0;\nRoadBuilder.trackLength = 0;\nRoadBuilder.cars = [];\nRoadBuilder.totalCars = 200;\nRoadBuilder.maxSpeed = RoadBuilder.segmentLength * 60;\n\n\n//# sourceURL=webpack://javascript-racer/./src/RoadBuilder.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BACKGROUND: () => (/* binding */ BACKGROUND),\n/* harmony export */   BILLBOARD_SPRITES: () => (/* binding */ BILLBOARD_SPRITES),\n/* harmony export */   CAR_SPRITES: () => (/* binding */ CAR_SPRITES),\n/* harmony export */   COLORS: () => (/* binding */ COLORS),\n/* harmony export */   KEY: () => (/* binding */ KEY),\n/* harmony export */   PLANT_SPRITES: () => (/* binding */ PLANT_SPRITES),\n/* harmony export */   SPRITES: () => (/* binding */ SPRITES),\n/* harmony export */   SPRITE_SCALE: () => (/* binding */ SPRITE_SCALE)\n/* harmony export */ });\nvar KEY;\n(function (KEY) {\n    KEY[KEY[\"LEFT\"] = 37] = \"LEFT\";\n    KEY[KEY[\"UP\"] = 38] = \"UP\";\n    KEY[KEY[\"RIGHT\"] = 39] = \"RIGHT\";\n    KEY[KEY[\"DOWN\"] = 40] = \"DOWN\";\n    KEY[KEY[\"A\"] = 65] = \"A\";\n    KEY[KEY[\"D\"] = 68] = \"D\";\n    KEY[KEY[\"S\"] = 83] = \"S\";\n    KEY[KEY[\"W\"] = 87] = \"W\";\n})(KEY || (KEY = {}));\nconst COLORS = {\n    SKY: '#72D7EE',\n    TREE: '#005108',\n    FOG: '#005108',\n    LIGHT: { road: '#6B6B6B', grass: '#10AA10', rumble: '#555555', lane: '#CCCCCC' },\n    DARK: { road: '#696969', grass: '#009A00', rumble: '#BBBBBB' },\n    START: { road: 'white', grass: 'white', rumble: 'white' },\n    FINISH: { road: 'black', grass: 'black', rumble: 'black' }\n};\nconst BACKGROUND = {\n    HILLS: { x: 5, y: 5, w: 1280, h: 480 },\n    SKY: { x: 5, y: 495, w: 1280, h: 480 },\n    TREES: { x: 5, y: 985, w: 1280, h: 480 }\n};\nconst SPRITES = {\n    PALM_TREE: { x: 5, y: 5, w: 215, h: 540 },\n    BILLBOARD08: { x: 230, y: 5, w: 385, h: 265 },\n    TREE1: { x: 625, y: 5, w: 360, h: 360 },\n    DEAD_TREE1: { x: 5, y: 555, w: 135, h: 332 },\n    BILLBOARD09: { x: 150, y: 555, w: 328, h: 282 },\n    BOULDER3: { x: 230, y: 280, w: 320, h: 220 },\n    COLUMN: { x: 995, y: 5, w: 200, h: 315 },\n    BILLBOARD01: { x: 625, y: 375, w: 300, h: 170 },\n    BILLBOARD06: { x: 488, y: 555, w: 298, h: 190 },\n    BILLBOARD05: { x: 5, y: 897, w: 298, h: 190 },\n    BILLBOARD07: { x: 313, y: 897, w: 298, h: 190 },\n    BOULDER2: { x: 621, y: 897, w: 298, h: 140 },\n    TREE2: { x: 1205, y: 5, w: 282, h: 295 },\n    BILLBOARD04: { x: 1205, y: 310, w: 268, h: 170 },\n    DEAD_TREE2: { x: 1205, y: 490, w: 150, h: 260 },\n    BOULDER1: { x: 1205, y: 760, w: 168, h: 248 },\n    BUSH1: { x: 5, y: 1097, w: 240, h: 155 },\n    CACTUS: { x: 929, y: 897, w: 235, h: 118 },\n    BUSH2: { x: 255, y: 1097, w: 232, h: 152 },\n    BILLBOARD03: { x: 5, y: 1262, w: 230, h: 220 },\n    BILLBOARD02: { x: 245, y: 1262, w: 215, h: 220 },\n    STUMP: { x: 995, y: 330, w: 195, h: 140 },\n    SEMI: { x: 1365, y: 490, w: 122, h: 144 },\n    TRUCK: { x: 1365, y: 644, w: 100, h: 78 },\n    CAR03: { x: 1383, y: 760, w: 88, h: 55 },\n    CAR02: { x: 1383, y: 825, w: 80, h: 59 },\n    CAR04: { x: 1383, y: 894, w: 80, h: 57 },\n    CAR01: { x: 1205, y: 1018, w: 80, h: 56 },\n    PLAYER_UPHILL_LEFT: { x: 1383, y: 961, w: 80, h: 45 },\n    PLAYER_UPHILL_STRAIGHT: { x: 1295, y: 1018, w: 80, h: 45 },\n    PLAYER_UPHILL_RIGHT: { x: 1385, y: 1018, w: 80, h: 45 },\n    PLAYER_LEFT: { x: 995, y: 480, w: 80, h: 41 },\n    PLAYER_STRAIGHT: { x: 1085, y: 480, w: 80, h: 41 },\n    PLAYER_RIGHT: { x: 995, y: 531, w: 80, h: 41 }\n};\nconst SPRITE_SCALE = 0.3 * (1 / SPRITES.PLAYER_STRAIGHT.w);\nconst BILLBOARD_SPRITES = [\n    SPRITES.BILLBOARD01, SPRITES.BILLBOARD02, SPRITES.BILLBOARD03,\n    SPRITES.BILLBOARD04, SPRITES.BILLBOARD05, SPRITES.BILLBOARD06,\n    SPRITES.BILLBOARD07, SPRITES.BILLBOARD08, SPRITES.BILLBOARD09\n];\nconst PLANT_SPRITES = [\n    SPRITES.TREE1, SPRITES.TREE2, SPRITES.DEAD_TREE1, SPRITES.DEAD_TREE2,\n    SPRITES.PALM_TREE, SPRITES.BUSH1, SPRITES.BUSH2, SPRITES.CACTUS,\n    SPRITES.STUMP, SPRITES.BOULDER1, SPRITES.BOULDER2, SPRITES.BOULDER3\n];\nconst CAR_SPRITES = [\n    SPRITES.CAR01, SPRITES.CAR02, SPRITES.CAR03, SPRITES.CAR04,\n    SPRITES.SEMI, SPRITES.TRUCK\n];\n\n\n//# sourceURL=webpack://javascript-racer/./src/constants.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RacingGame: () => (/* binding */ RacingGame)\n/* harmony export */ });\n/* harmony import */ var _Game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Game */ \"./src/Game.ts\");\n/* harmony import */ var _Render__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Render */ \"./src/Render.ts\");\n/* harmony import */ var _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RoadBuilder */ \"./src/RoadBuilder.ts\");\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\n/* harmony import */ var _utils_Dom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/Dom */ \"./src/utils/Dom.ts\");\n/* harmony import */ var _utils_Util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/Util */ \"./src/utils/Util.ts\");\n/* harmony import */ var _Hud__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Hud */ \"./src/Hud.ts\");\n/* harmony import */ var _Polyfill__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Polyfill */ \"./src/Polyfill.ts\");\n\n\n\n\n\n\n\n\n_Polyfill__WEBPACK_IMPORTED_MODULE_7__.Polyfill.applyRequestAnimationFrame();\nclass RacingGame {\n    constructor() {\n        // Basic game settings\n        this.fps = 60;\n        this.step = 1 / this.fps;\n        this.width = 1024;\n        this.height = 768;\n        // Game physics\n        this.centrifugal = 0.3;\n        this.skySpeed = 0.001;\n        this.hillSpeed = 0.002;\n        this.treeSpeed = 0.003;\n        // Background positions\n        this.skyOffset = 0;\n        this.hillOffset = 0;\n        this.treeOffset = 0;\n        this.background = null;\n        this.sprites = null;\n        // Road properties\n        this.roadWidth = 2000;\n        this.lanes = 3;\n        this.fieldOfView = 100;\n        this.cameraHeight = 1000;\n        this.cameraDepth = null;\n        this.drawDistance = 300;\n        this.fogDensity = 5;\n        this.segmentLength = 200;\n        this.rumbleLength = 3;\n        this.cars = [];\n        this.segments = [];\n        this.totalCars = 200;\n        // Player properties\n        this.playerX = 0;\n        this.playerZ = null;\n        this.position = 0;\n        this.speed = 0;\n        // Timing\n        this.currentLapTime = 0;\n        this.lastLapTime = null;\n        // Input state\n        this.keyLeft = false;\n        this.keyRight = false;\n        this.keyFaster = false;\n        this.keySlower = false;\n        // UI\n        this.hud = {\n            speed: { value: null, dom: null },\n            current_lap_time: { value: null, dom: null },\n            last_lap_time: { value: null, dom: null },\n            fast_lap_time: { value: null, dom: null }\n        };\n        this.storage = window.localStorage || new Storage();\n        this.canvas = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        // Initialize core game properties\n        this.maxSpeed = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segmentLength / this.step;\n        this.accel = this.maxSpeed / 5;\n        this.breaking = -this.maxSpeed;\n        this.decel = -this.maxSpeed / 5;\n        this.offRoadDecel = -this.maxSpeed / 2;\n        this.offRoadLimit = this.maxSpeed / 4;\n        this.segments = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments;\n        this.trackLength = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength;\n        this.cars = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars;\n        // Initialize HUD\n        this.hud = new _Hud__WEBPACK_IMPORTED_MODULE_6__.Hud();\n        // Initialize game\n        this.reset();\n        this.initializeEventListeners();\n    }\n    reset(options = {}) {\n        // Canvas dimensions\n        this.canvas.width = this.width = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.width, this.width);\n        this.canvas.height = this.height = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.height, this.height);\n        // Road properties\n        this.lanes = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.lanes, this.lanes);\n        this.roadWidth = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.roadWidth, this.roadWidth);\n        this.cameraHeight = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.cameraHeight, this.cameraHeight);\n        this.drawDistance = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.drawDistance, this.drawDistance);\n        this.fogDensity = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.fogDensity, this.fogDensity);\n        this.fieldOfView = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(options.fieldOfView, this.fieldOfView);\n        // Camera calculations\n        this.cameraDepth = 1 / Math.tan((this.fieldOfView / 2) * Math.PI / 180);\n        this.playerZ = (this.cameraHeight * this.cameraDepth);\n        this.resolution = this.height / 480;\n        // Reset road if necessary\n        if (_RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.getSegments().length === 0 ||\n            options.segmentLength ||\n            options.rumbleLength) {\n            _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.resetRoad();\n        }\n        // Update UI\n        this.refreshTweakUI();\n    }\n    refreshTweakUI() {\n        const lanesElement = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('lanes');\n        lanesElement.selectedIndex = this.lanes - 1;\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentRoadWidth', this.roadWidth.toString());\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('roadWidth').value = this.roadWidth.toString();\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentCameraHeight', this.cameraHeight.toString());\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('cameraHeight').value = this.cameraHeight.toString();\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentDrawDistance', this.drawDistance.toString());\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('drawDistance').value = this.drawDistance.toString();\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentFieldOfView', this.fieldOfView.toString());\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('fieldOfView').value = this.fieldOfView.toString();\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.set('currentFogDensity', this.fogDensity.toString());\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.get('fogDensity').value = this.fogDensity.toString();\n    }\n    update(dt) {\n        const playerSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position + this.playerZ);\n        const playerW = _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITES.PLAYER_STRAIGHT.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\n        const speedPercent = this.speed / this.maxSpeed;\n        const dx = dt * 2 * speedPercent;\n        const startPosition = this.position;\n        // Update cars positions and behavior\n        this.updateCars(dt, playerSegment, playerW);\n        // Update player position\n        this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.position, dt * this.speed, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\n        // Handle player steering\n        if (this.keyLeft) {\n            this.playerX = this.playerX - dx;\n        }\n        else if (this.keyRight) {\n            this.playerX = this.playerX + dx;\n        }\n        // Apply centrifugal force\n        this.playerX = this.playerX - (dx * speedPercent * playerSegment.curve * this.centrifugal);\n        // Handle player speed\n        if (this.keyFaster) {\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.accel, dt);\n        }\n        else if (this.keySlower) {\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.breaking, dt);\n        }\n        else {\n            this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.decel, dt);\n        }\n        // Handle off-road deceleration and collisions\n        // In update method, modify collision check:\n        if ((this.playerX < -1) || (this.playerX > 1)) {\n            if (this.speed > this.offRoadLimit) {\n                this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.accelerate(this.speed, this.offRoadDecel, dt);\n            }\n            // Sprite collisions\n            for (let n = 0; n < playerSegment.sprites.length; n++) {\n                const sprite = playerSegment.sprites[n];\n                const spriteW = sprite.source.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\n                const spriteX = sprite.offset + spriteW / 2 * (sprite.offset > 0 ? 1 : -1);\n                if (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, spriteX, spriteW)) {\n                    // Instead of immediately resetting position, smoothly reduce speed\n                    this.speed = Math.min(this.speed, this.maxSpeed / 5);\n                    this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(playerSegment.p1.world.z, -this.playerZ, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\n                    // Don't break here - let physics continue\n                }\n            }\n        }\n        // Handle collisions with other cars\n        for (let n = 0; n < playerSegment.cars.length; n++) {\n            const car = playerSegment.cars[n];\n            const carW = car.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\n            if (this.speed > car.speed) {\n                if (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, car.offset, carW, 0.8)) {\n                    // Smooth collision response\n                    const speedRatio = car.speed / this.speed;\n                    this.speed = car.speed * speedRatio;\n                    this.position = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(car.z, -this.playerZ, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\n                    // Don't break - continue physics\n                }\n            }\n        }\n        // Keep player on road and within speed limits - MUST BE AFTER collision handling\n        this.playerX = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(this.playerX, -3, 3);\n        this.speed = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(this.speed, 0, this.maxSpeed);\n        // Update background position based on curves\n        this.skyOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.skyOffset, this.skySpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\n        this.hillOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.hillOffset, this.hillSpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\n        this.treeOffset = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(this.treeOffset, this.treeSpeed * playerSegment.curve * (this.position - startPosition) / this.segmentLength, 1);\n        // Update lap times\n        if (this.position > this.playerZ) {\n            if (this.currentLapTime && (startPosition < this.playerZ)) {\n                this.lastLapTime = this.currentLapTime;\n                this.currentLapTime = 0;\n                if (this.lastLapTime <= _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toFloat(_utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.storage.fast_lap_time, 180)) {\n                    _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.storage.fast_lap_time = this.lastLapTime.toString();\n                    this.hud.updateHud('fast_lap_time', this.formatTime(this.lastLapTime));\n                    _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.addClassName('fast_lap_time', 'fastest');\n                    _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.addClassName('last_lap_time', 'fastest');\n                }\n                else {\n                    _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.removeClassName('fast_lap_time', 'fastest');\n                    _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.removeClassName('last_lap_time', 'fastest');\n                }\n                this.hud.updateHud('last_lap_time', this.formatTime(this.lastLapTime));\n                _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.show('last_lap_time');\n            }\n            else {\n                this.currentLapTime += dt;\n            }\n        }\n        // Update HUD\n        this.hud.updateHud('speed', 5 * Math.round(this.speed / 500));\n        this.hud.updateHud('current_lap_time', this.formatTime(this.currentLapTime));\n    }\n    render() {\n        const baseSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position);\n        const basePercent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(this.position, this.segmentLength);\n        const playerSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(this.position + this.playerZ);\n        const playerPercent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(this.position + this.playerZ, this.segmentLength);\n        const playerY = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(playerSegment.p1.world.y, playerSegment.p2.world.y, playerPercent);\n        let maxy = this.height;\n        let x = 0;\n        let dx = -(baseSegment.curve * basePercent);\n        // Clear canvas\n        this.ctx.clearRect(0, 0, this.width, this.height);\n        // Render background layers\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.SKY, this.skyOffset, this.resolution * this.skySpeed * playerY);\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.HILLS, this.hillOffset, this.resolution * this.hillSpeed * playerY);\n        _Render__WEBPACK_IMPORTED_MODULE_1__.Render.background(this.ctx, this.background, this.width, this.height, _constants__WEBPACK_IMPORTED_MODULE_3__.BACKGROUND.TREES, this.treeOffset, this.resolution * this.treeSpeed * playerY);\n        // Render road segments\n        for (let n = 0; n < this.drawDistance; n++) {\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(baseSegment.index + n) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\n            segment.looped = segment.index < baseSegment.index;\n            segment.fog = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.exponentialFog(n / this.drawDistance, this.fogDensity);\n            segment.clip = maxy;\n            _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.project(segment.p1, (this.playerX * this.roadWidth) - x, playerY + this.cameraHeight, this.position - (segment.looped ? _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength : 0), this.cameraDepth, this.width, this.height, this.roadWidth);\n            _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.project(segment.p2, (this.playerX * this.roadWidth) - x - dx, playerY + this.cameraHeight, this.position - (segment.looped ? _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength : 0), this.cameraDepth, this.width, this.height, this.roadWidth);\n            x = x + dx;\n            dx = dx + segment.curve;\n            // Skip if segment is behind us or outside view\n            if ((segment.p1.camera.z <= this.cameraDepth) ||\n                (segment.p2.screen.y >= segment.p1.screen.y) ||\n                (segment.p2.screen.y >= maxy)) {\n                continue;\n            }\n            // Render segment\n            _Render__WEBPACK_IMPORTED_MODULE_1__.Render.segment(this.ctx, this.width, this.lanes, segment.p1.screen.x, segment.p1.screen.y, segment.p1.screen.w, segment.p2.screen.x, segment.p2.screen.y, segment.p2.screen.w, segment.fog, segment.color);\n            maxy = segment.p1.screen.y;\n        }\n        // Render sprites and cars\n        for (let n = (this.drawDistance - 1); n > 0; n--) {\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(baseSegment.index + n) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\n            // Render cars\n            for (let i = 0; i < segment.cars.length; i++) {\n                const car = segment.cars[i];\n                const sprite = car.sprite;\n                const scale = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.scale, segment.p2.screen.scale, car.percent);\n                const spriteX = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.x, segment.p2.screen.x, car.percent) + (scale * car.offset * this.roadWidth * this.width / 2);\n                const spriteY = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(segment.p1.screen.y, segment.p2.screen.y, car.percent);\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.sprite(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], sprite, scale, spriteX, spriteY, -0.5, -1);\n            }\n            // Render roadside sprites\n            for (let i = 0; i < segment.sprites.length; i++) {\n                const sprite = segment.sprites[i];\n                const scale = segment.p1.screen.scale;\n                const spriteX = segment.p1.screen.x + (scale * sprite.offset * this.roadWidth * this.width / 2);\n                const spriteY = segment.p1.screen.y;\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.sprite(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], sprite.source, scale, spriteX, spriteY, -0.5, -1);\n            }\n            // Render player\n            if (segment === playerSegment) {\n                _Render__WEBPACK_IMPORTED_MODULE_1__.Render.player(this.ctx, this.width, this.height, this.resolution, this.roadWidth, [this.sprites], this.speed / this.maxSpeed, this.cameraDepth / this.playerZ, this.width / 2, this.height / 2 - (this.cameraDepth / this.playerZ * _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.interpolate(playerSegment.p1.camera.y, playerSegment.p2.camera.y, playerPercent) * this.height / 2), this.playerX * (this.keyLeft ? -1 : this.keyRight ? 1 : 0), playerSegment.p2.world.y - playerSegment.p1.world.y);\n            }\n        }\n    }\n    updateCars(dt, playerSegment, playerW) {\n        for (let n = 0; n < _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars.length; n++) {\n            const car = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.cars[n];\n            const oldSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(car.z);\n            car.offset = car.offset + this.updateCarOffset(car, oldSegment, playerSegment, playerW);\n            car.z = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.increase(car.z, dt * car.speed, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.trackLength);\n            car.percent = _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.percentRemaining(car.z, _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segmentLength);\n            const newSegment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.findSegment(car.z);\n            if (oldSegment !== newSegment) {\n                const index = oldSegment.cars.indexOf(car);\n                oldSegment.cars.splice(index, 1);\n                newSegment.cars.push(car);\n            }\n        }\n    }\n    updateCarOffset(car, carSegment, playerSegment, playerW) {\n        const lookahead = 20;\n        const carW = car.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\n        // optimization, dont bother steering around other cars when 'out of sight' of the player\n        if ((carSegment.index - playerSegment.index) > this.drawDistance)\n            return 0;\n        for (let i = 1; i < lookahead; i++) {\n            const segment = _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments[(carSegment.index + i) % _RoadBuilder__WEBPACK_IMPORTED_MODULE_2__.RoadBuilder.segments.length];\n            if ((segment === playerSegment) && (car.speed > this.speed) &&\n                (_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(this.playerX, playerW, car.offset, carW, 1.2))) {\n                if (this.playerX > 0.5)\n                    return -1 / i * (car.speed - this.speed) / this.maxSpeed;\n                else if (this.playerX < -0.5)\n                    return 1 / i * (car.speed - this.speed) / this.maxSpeed;\n                else\n                    return (car.offset > this.playerX) ?\n                        -1 / i * (car.speed - this.speed) / this.maxSpeed :\n                        1 / i * (car.speed - this.speed) / this.maxSpeed;\n            }\n            for (let j = 0; j < segment.cars.length; j++) {\n                const otherCar = segment.cars[j];\n                const otherCarW = otherCar.sprite.w * _constants__WEBPACK_IMPORTED_MODULE_3__.SPRITE_SCALE;\n                if ((car.speed > otherCar.speed) &&\n                    _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.overlap(car.offset, carW, otherCar.offset, otherCarW, 1.2)) {\n                    if (otherCar.offset > 0.5)\n                        return -1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\n                    else if (otherCar.offset < -0.5)\n                        return 1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\n                    else\n                        return (car.offset > otherCar.offset) ?\n                            1 / i * (car.speed - otherCar.speed) / this.maxSpeed :\n                            -1 / i * (car.speed - otherCar.speed) / this.maxSpeed;\n                }\n            }\n        }\n        // if no cars ahead, but I have somehow ended up off road, then steer back on\n        if (car.offset < -0.9)\n            return 0.1;\n        else if (car.offset > 0.9)\n            return -0.1;\n        else\n            return 0;\n    }\n    formatTime(dt) {\n        const minutes = Math.floor(dt / 60);\n        const seconds = Math.floor(dt - (minutes * 60));\n        const tenths = Math.floor(10 * (dt - Math.floor(dt)));\n        if (minutes > 0) {\n            return `${minutes}.${seconds < 10 ? \"0\" : \"\"}${seconds}.${tenths}`;\n        }\n        else {\n            return `${seconds}.${tenths}`;\n        }\n    }\n    initializeEventListeners() {\n        // Resolution change handler\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('resolution', 'change', (ev) => {\n            const target = ev.target;\n            let w, h;\n            switch (target.options[target.selectedIndex].value) {\n                case 'fine':\n                    w = 1280;\n                    h = 960;\n                    break;\n                case 'high':\n                    w = 1024;\n                    h = 768;\n                    break;\n                case 'medium':\n                    w = 640;\n                    h = 480;\n                    break;\n                case 'low':\n                    w = 480;\n                    h = 360;\n                    break;\n                default:\n                    w = 1024;\n                    h = 768;\n                    break;\n            }\n            this.reset({ width: w, height: h });\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n        });\n        // Other UI controls\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('lanes', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({ lanes: Number(target.options[target.selectedIndex].value) });\n        });\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('roadWidth', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({\n                roadWidth: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.roadWidth), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 500), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 3000))\n            });\n        });\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('cameraHeight', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({\n                cameraHeight: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.cameraHeight), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 100), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 2000))\n            });\n        });\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('drawDistance', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({\n                drawDistance: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.drawDistance), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 100), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 1000))\n            });\n        });\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('fieldOfView', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({\n                fieldOfView: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.fieldOfView), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 60), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 140))\n            });\n        });\n        _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.on('fogDensity', 'change', (ev) => {\n            const target = ev.target;\n            _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.blur(ev);\n            this.reset({\n                fogDensity: _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.limit(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.value, this.fogDensity), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('min'), 1), _utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toInt(target.getAttribute('max'), 10))\n            });\n        });\n    }\n    start() {\n        _Game__WEBPACK_IMPORTED_MODULE_0__.Game.run({\n            canvas: this.canvas,\n            render: () => this.render(),\n            update: (dt) => this.update(dt),\n            stats: _Game__WEBPACK_IMPORTED_MODULE_0__.Game.stats('fps'),\n            step: this.step,\n            images: [\"background\", \"sprites\"],\n            keys: [\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.LEFT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.A], mode: 'down', action: () => { this.keyLeft = true; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.RIGHT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.D], mode: 'down', action: () => { this.keyRight = true; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.UP, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.W], mode: 'down', action: () => { this.keyFaster = true; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.DOWN, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.S], mode: 'down', action: () => { this.keySlower = true; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.LEFT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.A], mode: 'up', action: () => { this.keyLeft = false; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.RIGHT, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.D], mode: 'up', action: () => { this.keyRight = false; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.UP, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.W], mode: 'up', action: () => { this.keyFaster = false; } },\n                { keys: [_constants__WEBPACK_IMPORTED_MODULE_3__.KEY.DOWN, _constants__WEBPACK_IMPORTED_MODULE_3__.KEY.S], mode: 'up', action: () => { this.keySlower = false; } }\n            ],\n            ready: (images) => {\n                this.background = images[0];\n                this.sprites = images[1];\n                this.reset();\n                // Initialize fast lap time if not set\n                _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.storage.fast_lap_time = _utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.storage.fast_lap_time || '180';\n                this.hud.updateHud('fast_lap_time', this.formatTime(_utils_Util__WEBPACK_IMPORTED_MODULE_5__.Util.toFloat(_utils_Dom__WEBPACK_IMPORTED_MODULE_4__.Dom.storage.fast_lap_time, 180)));\n            }\n        });\n    }\n}\nnew RacingGame().start();\n\n\n//# sourceURL=webpack://javascript-racer/./src/index.ts?");

/***/ }),

/***/ "./src/stats/Stats.ts":
/*!****************************!*\
  !*** ./src/stats/Stats.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Stats: () => (/* binding */ Stats)\n/* harmony export */ });\nclass Stats {\n    constructor() {\n        this.startTime = Date.now();\n        this.prevTime = this.startTime;\n        this.ms = 0;\n        this.msMin = 1000;\n        this.msMax = 0;\n        this.fps = 0;\n        this.fpsMin = 1000;\n        this.fpsMax = 0;\n        this.frames = 0;\n        this.mode = 0;\n        this.initializeDOM();\n    }\n    initializeDOM() {\n        // Container\n        this.container = document.createElement('div');\n        this.container.id = 'stats';\n        this.container.style.cssText = 'width:80px;opacity:0.9;cursor:pointer';\n        this.container.addEventListener('mousedown', (event) => {\n            event.preventDefault();\n            this.setMode((++this.mode) % 2);\n        });\n        // FPS\n        this.fpsDiv = document.createElement('div');\n        this.fpsDiv.id = 'fps';\n        this.fpsDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#002';\n        this.fpsText = document.createElement('div');\n        this.fpsText.id = 'fpsText';\n        this.fpsText.style.cssText = 'color:#0ff;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        this.fpsText.innerHTML = 'FPS';\n        this.fpsGraph = document.createElement('div');\n        this.fpsGraph.id = 'fpsGraph';\n        this.fpsGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0ff';\n        // MS\n        this.msDiv = document.createElement('div');\n        this.msDiv.id = 'ms';\n        this.msDiv.style.cssText = 'padding:0 0 3px 3px;text-align:left;background-color:#020;display:none';\n        this.msText = document.createElement('div');\n        this.msText.id = 'msText';\n        this.msText.style.cssText = 'color:#0f0;font-family:Helvetica,Arial,sans-serif;font-size:9px;font-weight:bold;line-height:15px';\n        this.msText.innerHTML = 'MS';\n        this.msGraph = document.createElement('div');\n        this.msGraph.id = 'msGraph';\n        this.msGraph.style.cssText = 'position:relative;width:74px;height:30px;background-color:#0f0';\n        // Build DOM hierarchy\n        this.fpsDiv.appendChild(this.fpsText);\n        this.fpsDiv.appendChild(this.fpsGraph);\n        this.msDiv.appendChild(this.msText);\n        this.msDiv.appendChild(this.msGraph);\n        this.container.appendChild(this.fpsDiv);\n        this.container.appendChild(this.msDiv);\n        // Create graph bars\n        this.createBars(this.fpsGraph);\n        this.createBars(this.msGraph);\n        document.body.appendChild(this.container);\n    }\n    createBars(graph) {\n        for (let i = 0; i < 74; i++) {\n            const bar = document.createElement('span');\n            bar.style.cssText = `width:1px;height:30px;float:left;background-color:${graph.id === 'fpsGraph' ? '#113' : '#131'}`;\n            graph.appendChild(bar);\n        }\n    }\n    setMode(value) {\n        this.mode = value;\n        switch (this.mode) {\n            case 0:\n                this.fpsDiv.style.display = 'block';\n                this.msDiv.style.display = 'none';\n                break;\n            case 1:\n                this.fpsDiv.style.display = 'none';\n                this.msDiv.style.display = 'block';\n                break;\n        }\n    }\n    updateGraph(dom, value) {\n        const child = dom.appendChild(dom.firstChild);\n        child.style.height = `${value}px`;\n    }\n    current() {\n        return this.fps;\n    }\n    begin() {\n        this.startTime = Date.now();\n    }\n    end() {\n        const time = Date.now();\n        this.ms = time - this.startTime;\n        this.msMin = Math.min(this.msMin, this.ms);\n        this.msMax = Math.max(this.msMax, this.ms);\n        this.msText.textContent = `${this.ms} MS (${this.msMin}-${this.msMax})`;\n        this.updateGraph(this.msGraph, Math.min(30, 30 - (this.ms / 200) * 30));\n        this.frames++;\n        if (time > this.prevTime + 1000) {\n            this.fps = Math.round((this.frames * 1000) / (time - this.prevTime));\n            this.fpsMin = Math.min(this.fpsMin, this.fps);\n            this.fpsMax = Math.max(this.fpsMax, this.fps);\n            this.fpsText.textContent = `${this.fps} FPS (${this.fpsMin}-${this.fpsMax})`;\n            this.updateGraph(this.fpsGraph, Math.min(30, 30 - (this.fps / 100) * 30));\n            this.prevTime = time;\n            this.frames = 0;\n        }\n        return time;\n    }\n    update() {\n        this.startTime = this.end();\n    }\n    get domElement() {\n        return this.container;\n    }\n}\n\n\n//# sourceURL=webpack://javascript-racer/./src/stats/Stats.ts?");

/***/ }),

/***/ "./src/utils/Dom.ts":
/*!**************************!*\
  !*** ./src/utils/Dom.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dom: () => (/* binding */ Dom)\n/* harmony export */ });\nclass Dom {\n    static get(id) {\n        if (id instanceof HTMLElement || id === document)\n            return id;\n        return document.getElementById(id);\n    }\n    static set(id, html) {\n        this.get(id).innerHTML = html;\n    }\n    static on(ele, type, fn, capture) {\n        this.get(ele).addEventListener(type, fn, capture);\n    }\n    static un(ele, type, fn, capture) {\n        this.get(ele).removeEventListener(type, fn, capture);\n    }\n    static show(ele, type) {\n        this.get(ele).style.display = type || 'block';\n    }\n    static blur(ev) {\n        ev.target.blur();\n    }\n    static addClassName(ele, name) {\n        this.toggleClassName(ele, name, true);\n    }\n    static removeClassName(ele, name) {\n        this.toggleClassName(ele, name, false);\n    }\n    static toggleClassName(ele, name, on) {\n        const element = this.get(ele);\n        const classes = element.className.split(' ');\n        const n = classes.indexOf(name);\n        const forceOn = (typeof on === 'undefined') ? (n < 0) : on;\n        if (forceOn && n < 0) {\n            classes.push(name);\n        }\n        else if (!forceOn && n >= 0) {\n            classes.splice(n, 1);\n        }\n        element.className = classes.join(' ');\n    }\n}\nDom.storage = window.localStorage || {};\n\n\n//# sourceURL=webpack://javascript-racer/./src/utils/Dom.ts?");

/***/ }),

/***/ "./src/utils/Util.ts":
/*!***************************!*\
  !*** ./src/utils/Util.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Util: () => (/* binding */ Util)\n/* harmony export */ });\nclass Util {\n    static timestamp() {\n        return new Date().getTime();\n    }\n    static toInt(obj, def) {\n        if (obj !== null && !isNaN(obj))\n            return parseInt(obj, 10);\n        return def || 0;\n    }\n    static toFloat(obj, def) {\n        if (obj !== null && !isNaN(obj))\n            return parseFloat(obj);\n        return def || 0.0;\n    }\n    static limit(value, min, max) {\n        return Math.max(min, Math.min(value, max));\n    }\n    static randomInt(min, max) {\n        return Math.round(this.interpolate(min, max, Math.random()));\n    }\n    static randomChoice(options) {\n        return options[this.randomInt(0, options.length - 1)];\n    }\n    static percentRemaining(n, total) {\n        return (n % total) / total;\n    }\n    static accelerate(v, accel, dt) {\n        return v + accel * dt;\n    }\n    static interpolate(a, b, percent) {\n        return a + (b - a) * percent;\n    }\n    static easeIn(a, b, percent) {\n        return a + (b - a) * Math.pow(percent, 2);\n    }\n    static easeOut(a, b, percent) {\n        return a + (b - a) * (1 - Math.pow(1 - percent, 2));\n    }\n    static easeInOut(a, b, percent) {\n        return a + (b - a) * ((-Math.cos(percent * Math.PI) / 2) + 0.5);\n    }\n    static exponentialFog(distance, density) {\n        return 1 / (Math.pow(Math.E, distance * distance * density));\n    }\n    static increase(start, increment, max) {\n        let result = start + increment;\n        while (result >= max)\n            result -= max;\n        while (result < 0)\n            result += max;\n        return result;\n    }\n    static project(p, cameraX, cameraY, cameraZ, cameraDepth, width, height, roadWidth) {\n        p.camera.x = (p.world.x || 0) - cameraX;\n        p.camera.y = (p.world.y || 0) - cameraY;\n        p.camera.z = (p.world.z || 0) - cameraZ;\n        p.screen.scale = cameraDepth / p.camera.z;\n        p.screen.x = Math.round((width / 2) + (p.screen.scale * p.camera.x * width / 2));\n        p.screen.y = Math.round((height / 2) - (p.screen.scale * p.camera.y * height / 2));\n        p.screen.w = Math.round((p.screen.scale * roadWidth * width / 2));\n    }\n    static overlap(x1, w1, x2, w2, percent = 1) {\n        const half = percent / 2;\n        const min1 = x1 - (w1 * half);\n        const max1 = x1 + (w1 * half);\n        const min2 = x2 - (w2 * half);\n        const max2 = x2 + (w2 * half);\n        return !(max1 < min2 || min1 > max2);\n    }\n}\n\n\n//# sourceURL=webpack://javascript-racer/./src/utils/Util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;